// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.2
// source: rtapi/realtime.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  ChannelDescription as ChannelDescription1,
  ChannelMessage,
  ChannelMessageHeader,
  CreateEventRequest,
  GiveCoffeeEvent,
  MessageAttachment,
  MessageMention,
  MessageReaction,
  MessageRef,
  Notification,
  NotificationUserChannel,
  PermissionUpdate,
  Role,
  Rpc,
  TokenSentEvent,
  UserActivity,
  Webhook,
} from "../api/api";
import { Timestamp } from "../google/protobuf/timestamp";
import { BoolValue, Int32Value, StringValue } from "../google/protobuf/wrappers";

export const protobufPackage = "mezon.realtime";

/** The realtime protocol for Mezon server. */

/** An envelope for a realtime message. */
export interface Envelope {
  cid: string;
  /** A response from a channel join operation. */
  channel?:
    | Channel
    | undefined;
  /** Join a realtime chat clan */
  clan_join?:
    | ClanJoin
    | undefined;
  /** Join a realtime chat channel. */
  channel_join?:
    | ChannelJoin
    | undefined;
  /** Leave a realtime chat channel. */
  channel_leave?:
    | ChannelLeave
    | undefined;
  /** An incoming message on a realtime chat channel. */
  channel_message?:
    | ChannelMessage
    | undefined;
  /** An acknowledgement received in response to sending a message on a chat channel. */
  channel_message_ack?:
    | ChannelMessageAck
    | undefined;
  /** Send a message to a realtime chat channel. */
  channel_message_send?:
    | ChannelMessageSend
    | undefined;
  /** Update a message previously sent to a realtime chat channel. */
  channel_message_update?:
    | ChannelMessageUpdate
    | undefined;
  /** Remove a message previously sent to a realtime chat channel. */
  channel_message_remove?:
    | ChannelMessageRemove
    | undefined;
  /** Presence update for a particular realtime chat channel. */
  channel_presence_event?:
    | ChannelPresenceEvent
    | undefined;
  /** Describes an error which occurred on the server. */
  error?:
    | Error
    | undefined;
  /** Notifications send by the server. */
  notifications?:
    | Notifications
    | undefined;
  /** RPC call or response. */
  rpc?:
    | Rpc
    | undefined;
  /** An incoming status snapshot for some set of users. */
  status?:
    | Status
    | undefined;
  /** Start following some set of users to receive their status updates. */
  status_follow?:
    | StatusFollow
    | undefined;
  /** An incoming status update. */
  status_presence_event?:
    | StatusPresenceEvent
    | undefined;
  /** Stop following some set of users to no longer receive their status updates. */
  status_unfollow?:
    | StatusUnfollow
    | undefined;
  /** Set the user's own status. */
  status_update?:
    | StatusUpdate
    | undefined;
  /** A data message delivered over a stream. */
  stream_data?:
    | StreamData
    | undefined;
  /** Presence update for a particular stream. */
  stream_presence_event?:
    | StreamPresenceEvent
    | undefined;
  /** Application-level heartbeat and connection check. */
  ping?:
    | Ping
    | undefined;
  /** Application-level heartbeat and connection check response. */
  pong?:
    | Pong
    | undefined;
  /** User typing event */
  message_typing_event?:
    | MessageTypingEvent
    | undefined;
  /** Last seen message event */
  last_seen_message_event?:
    | LastSeenMessageEvent
    | undefined;
  /** User send reactoin event */
  message_reaction_event?:
    | MessageReaction
    | undefined;
  /** user join voice channel */
  voice_joined_event?:
    | VoiceJoinedEvent
    | undefined;
  /** user leave voice channel */
  voice_leaved_event?:
    | VoiceLeavedEvent
    | undefined;
  /** voice channel start */
  voice_started_event?:
    | VoiceStartedEvent
    | undefined;
  /** voice channel end */
  voice_ended_event?:
    | VoiceEndedEvent
    | undefined;
  /** channel created event */
  channel_created_event?:
    | ChannelCreatedEvent
    | undefined;
  /** channel deleted event */
  channel_deleted_event?:
    | ChannelDeletedEvent
    | undefined;
  /** channel deleted event */
  channel_updated_event?:
    | ChannelUpdatedEvent
    | undefined;
  /** Last pin message event */
  last_pin_message_event?:
    | LastPinMessageEvent
    | undefined;
  /** Update custom status */
  custom_status_event?:
    | CustomStatusEvent
    | undefined;
  /** User is added to channel event */
  user_channel_added_event?:
    | UserChannelAdded
    | undefined;
  /** User is removed to channel event */
  user_channel_removed_event?:
    | UserChannelRemoved
    | undefined;
  /** User is removed to clan event */
  user_clan_removed_event?:
    | UserClanRemoved
    | undefined;
  /** Clan updated event */
  clan_updated_event?:
    | ClanUpdatedEvent
    | undefined;
  /** Clan profile updated event */
  clan_profile_updated_event?:
    | ClanProfileUpdatedEvent
    | undefined;
  /** Check duplicate clan name event */
  check_name_existed_event?:
    | CheckNameExistedEvent
    | undefined;
  /** User profile update event */
  user_profile_updated_event?:
    | UserProfileUpdatedEvent
    | undefined;
  /** user join clan */
  add_clan_user_event?:
    | AddClanUserEvent
    | undefined;
  /** clan event created */
  clan_event_created?:
    | CreateEventRequest
    | undefined;
  /** role assigned event */
  role_assign_event?:
    | RoleAssignedEvent
    | undefined;
  /** clan deleted event */
  clan_deleted_event?:
    | ClanDeletedEvent
    | undefined;
  /** Give a coffe event */
  give_coffee_event?:
    | GiveCoffeeEvent
    | undefined;
  /** sticker created event */
  sticker_create_event?:
    | StickerCreateEvent
    | undefined;
  /** sticker updated event */
  sticker_update_event?:
    | StickerUpdateEvent
    | undefined;
  /** sticker deleted event */
  sticker_delete_event?:
    | StickerDeleteEvent
    | undefined;
  /** role created event */
  role_event?:
    | RoleEvent
    | undefined;
  /** Event emoji */
  event_emoji?:
    | EventEmoji
    | undefined;
  /** user join streaming channel */
  streaming_joined_event?:
    | StreamingJoinedEvent
    | undefined;
  /** user leave streaming channel */
  streaming_leaved_event?:
    | StreamingLeavedEvent
    | undefined;
  /** streaming channel start */
  streaming_started_event?:
    | StreamingStartedEvent
    | undefined;
  /** streaming channel end */
  streaming_ended_event?:
    | StreamingEndedEvent
    | undefined;
  /** set permission of role/user in channel */
  permission_set_event?:
    | PermissionSetEvent
    | undefined;
  /** permission changed event */
  permission_changed_event?:
    | PermissionChangedEvent
    | undefined;
  /** token is sent event */
  token_sent_event?: TokenSentEvent | undefined;
  message_button_clicked?:
    | MessageButtonClicked
    | undefined;
  /** unmute channel event */
  unmute_event?:
    | UnmuteEvent
    | undefined;
  /** voice call */
  webrtc_signaling_fwd?:
    | WebrtcSignalingFwd
    | undefined;
  /** List activity event for each user */
  list_activity?:
    | ListActivity
    | undefined;
  /** dropdown box selected */
  dropdown_box_selected?:
    | DropdownBoxSelected
    | undefined;
  /** IncomingCallPush */
  incoming_call_push?:
    | IncomingCallPush
    | undefined;
  /** Sd topic event */
  sd_topic_event?:
    | SdTopicEvent
    | undefined;
  /** follower list */
  follow_event?:
    | FollowEvent
    | undefined;
  /** channel app event */
  channel_app_event?:
    | ChannelAppEvent
    | undefined;
  /** User custom status event */
  user_status_event?:
    | UserStatusEvent
    | undefined;
  /**  */
  remove_friend?:
    | RemoveFriend
    | undefined;
  /**  */
  webhook_event?:
    | Webhook
    | undefined;
  /**  */
  noti_user_channel?: NotificationUserChannel | undefined;
  join_channel_app_data?:
    | JoinChannelAppData
    | undefined;
  /** channel canvas */
  canvas_event?:
    | ChannelCanvas
    | undefined;
  /** unpin message */
  unpin_message_event?:
    | UnpinMessageEvent
    | undefined;
  /** category event */
  category_event?:
    | CategoryEvent
    | undefined;
  /** handle join/leave channel voice */
  handle_participant_meet_state_event?:
    | HandleParticipantMeetStateEvent
    | undefined;
  /** delete acc */
  delete_account_event?: DeleteAccountEvent | undefined;
}

export interface FollowEvent {
}

export interface ChannelCanvas {
  /** id */
  id: string;
  /** title */
  title: string;
  /** content */
  content: string;
  /** creator */
  creator_id: string;
  /** editor */
  editor_id: string;
  /** is default */
  is_default: boolean;
  /** channel_id */
  channel_id: string;
  /** status */
  status: number;
}

export interface IncomingCallPush {
  receiver_id: string;
  json_data: string;
  channel_id: string;
  caller_id: string;
}

export interface WebrtcSignalingFwd {
  receiver_id: string;
  data_type: number;
  json_data: string;
  channel_id: string;
  caller_id: string;
}

export interface SFUSignalingFwd {
  clan_id: string;
  channel_id: string;
  data_type: number;
  json_data: string;
  user_id: string;
}

export interface AddClanUserEvent {
  /** the clan id */
  clan_id: string;
  /** the user */
  user: UserProfileRedis | undefined;
}

/** On role assign */
export interface RoleAssignedEvent {
  /** The clan of this role */
  ClanId: string;
  /** Role ID */
  role_id: string;
  /** UserIds Assigned */
  user_ids_assigned: string[];
  /** UserIds Removed */
  user_ids_removed: string[];
}

/** Permission role channel */
export interface PermissionRoleChannel {
  /** Permission id */
  permission_id: string;
  /** active */
  active: boolean;
}

/** hashtagDM */
export interface HashtagDm {
  /** The channel id. */
  channel_id: string;
  /** The channel lable */
  channel_label: string;
  /** The clan of this channel */
  clan_id: string;
  /** The clan name */
  clan_name: string;
  /**  */
  meeting_code: string;
  /**  */
  type: number;
  /**  */
  channel_private: number;
  /**  */
  parent_id: string;
}

/** Channel description record */
export interface ChannelDescription {
  /** The clan of this channel */
  clan_id: string;
  /** The channel this message belongs to. */
  channel_id: string;
  /** The channel type. */
  type:
    | number
    | undefined;
  /** The channel lable */
  channel_label: string;
  /** The channel private */
  channel_private: number;
  /** meeting code */
  meeting_code: string;
  /**  */
  clan_name: string;
  /**  */
  parent_id: string;
  /**  */
  last_sent_message: ChannelMessageHeader | undefined;
}

export interface ClanEmoji {
  id: string;
  /** src url */
  src: string;
  /** shortname */
  shortname: string;
  /** category */
  category: string;
  /** creator id */
  creator_id: string;
  /** clan_id */
  clan_id: string;
  /** clan logo */
  logo: string;
  /** clan name */
  clan_name: string;
}

/** A realtime chat channel. */
export interface Channel {
  /** The ID of the channel. */
  id: string;
  /** The users currently in the channel. */
  presences: UserPresence[];
  /** A reference to the current user's presence in the channel. */
  self:
    | UserPresence
    | undefined;
  /** The name of the chat room, or an empty string if this message was not sent through a chat room. */
  chanel_label: string;
  /** The clan logo */
  clan_logo: string;
  /** The category name */
  category_name: string;
}

/** Join operation for a realtime chat channel. */
export interface ClanJoin {
  /** The id of channel or group */
  clan_id: string;
}

/** Join operation for a realtime chat channel. */
export interface ChannelJoin {
  /** The clan id */
  clan_id: string;
  /** The id of channel or group */
  channel_id: string;
  /** channel type */
  channel_type: number;
  /** is public */
  is_public: boolean;
}

/** Leave a realtime channel. */
export interface ChannelLeave {
  /** The clan id */
  clan_id: string;
  /** The ID of the channel to leave. */
  channel_id: string;
  /** channel type */
  channel_type: number;
  /** is public channel */
  is_public: boolean;
}

/** A receipt reply from a channel message send operation. */
export interface ChannelMessageAck {
  /** The channel the message was sent to. */
  channel_id: string;
  /** The unique ID assigned to the message. */
  message_id: string;
  /** The code representing a message type or category. */
  code:
    | number
    | undefined;
  /** Username of the message sender. */
  username: string;
  /** The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was created. */
  create_time:
    | Date
    | undefined;
  /** The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was last updated. */
  update_time:
    | Date
    | undefined;
  /** True if the message was persisted to the channel's history, false otherwise. */
  persistent:
    | boolean
    | undefined;
  /** The clan logo */
  clan_logo: string;
  /** The category name */
  category_name: string;
}

/** Send a message to a realtime channel. */
export interface ChannelMessageSend {
  /** The clan that channel belong to. */
  clan_id: string;
  /** The channel to sent to. */
  channel_id: string;
  /** Message content. */
  content: string;
  /** Message mention */
  mentions: MessageMention[];
  /** Message attachment */
  attachments: MessageAttachment[];
  /** Message reference */
  references: MessageRef[];
  /** Mode */
  mode: number;
  /** anonymous message */
  anonymous_message: boolean;
  /** mention everyone */
  mention_everyone: boolean;
  /** clan avatar */
  avatar: string;
  /** is public */
  is_public: boolean;
  /** code */
  code: number;
  /**  */
  topic_id: string;
}

/** Update a message previously sent to a realtime channel. */
export interface ChannelMessageUpdate {
  /** The clan that channel belong to. */
  clan_id: string;
  /** The channel the message was sent to. */
  channel_id: string;
  /** The ID assigned to the message to update. */
  message_id: string;
  /** New message content. */
  content: string;
  /** The mentions */
  mentions: MessageMention[];
  /** Message attachment */
  attachments: MessageAttachment[];
  /** The mode */
  mode: number;
  /** is public */
  is_public: boolean;
  /** hide editted */
  hide_editted: boolean;
  /** topic id */
  topic_id: string;
  /** update message topic */
  is_update_msg_topic: boolean;
}

/** Remove a message previously sent to a realtime channel. */
export interface ChannelMessageRemove {
  /** The clan that channel belong to. */
  clan_id: string;
  /** The channel the message was sent to. */
  channel_id: string;
  /** The ID assigned to the message to update. */
  message_id: string;
  /** The mode */
  mode: number;
  /** is public */
  is_public: boolean;
  /** has_attachments. */
  has_attachment: boolean;
  /**  */
  topic_id: string;
}

/** A set of joins and leaves on a particular channel. */
export interface ChannelPresenceEvent {
  /** The channel identifier this event is for. */
  channel_id: string;
  /** Presences joining the channel as part of this event, if any. */
  joins: UserPresence[];
  /** Presences leaving the channel as part of this event, if any. */
  leaves: UserPresence[];
  /** The clan logo */
  clan_logo: string;
  /** The category name */
  category_name: string;
  /** The mode */
  mode: number;
}

/** A logical error which may occur on the server. */
export interface Error {
  /** The error code which should be one of "Error.Code" enums. */
  code: number;
  /** A message in English to help developers debug the response. */
  message: string;
  /** Additional error details which may be different for each response. */
  context: { [key: string]: string };
}

/** The selection of possible error codes. */
export enum Error_Code {
  /** RUNTIME_EXCEPTION - An unexpected result from the server. */
  RUNTIME_EXCEPTION = 0,
  /** UNRECOGNIZED_PAYLOAD - The server received a message which is not recognised. */
  UNRECOGNIZED_PAYLOAD = 1,
  /** MISSING_PAYLOAD - A message was expected but contains no content. */
  MISSING_PAYLOAD = 2,
  /** BAD_INPUT - Fields in the message have an invalid format. */
  BAD_INPUT = 3,
  /** MATCH_NOT_FOUND - The match id was not found. */
  MATCH_NOT_FOUND = 4,
  /** MATCH_JOIN_REJECTED - The match join was rejected. */
  MATCH_JOIN_REJECTED = 5,
  /** RUNTIME_FUNCTION_NOT_FOUND - The runtime function does not exist on the server. */
  RUNTIME_FUNCTION_NOT_FOUND = 6,
  /** RUNTIME_FUNCTION_EXCEPTION - The runtime function executed with an error. */
  RUNTIME_FUNCTION_EXCEPTION = 7,
  UNRECOGNIZED = -1,
}

export function error_CodeFromJSON(object: any): Error_Code {
  switch (object) {
    case 0:
    case "RUNTIME_EXCEPTION":
      return Error_Code.RUNTIME_EXCEPTION;
    case 1:
    case "UNRECOGNIZED_PAYLOAD":
      return Error_Code.UNRECOGNIZED_PAYLOAD;
    case 2:
    case "MISSING_PAYLOAD":
      return Error_Code.MISSING_PAYLOAD;
    case 3:
    case "BAD_INPUT":
      return Error_Code.BAD_INPUT;
    case 4:
    case "MATCH_NOT_FOUND":
      return Error_Code.MATCH_NOT_FOUND;
    case 5:
    case "MATCH_JOIN_REJECTED":
      return Error_Code.MATCH_JOIN_REJECTED;
    case 6:
    case "RUNTIME_FUNCTION_NOT_FOUND":
      return Error_Code.RUNTIME_FUNCTION_NOT_FOUND;
    case 7:
    case "RUNTIME_FUNCTION_EXCEPTION":
      return Error_Code.RUNTIME_FUNCTION_EXCEPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Error_Code.UNRECOGNIZED;
  }
}

export function error_CodeToJSON(object: Error_Code): string {
  switch (object) {
    case Error_Code.RUNTIME_EXCEPTION:
      return "RUNTIME_EXCEPTION";
    case Error_Code.UNRECOGNIZED_PAYLOAD:
      return "UNRECOGNIZED_PAYLOAD";
    case Error_Code.MISSING_PAYLOAD:
      return "MISSING_PAYLOAD";
    case Error_Code.BAD_INPUT:
      return "BAD_INPUT";
    case Error_Code.MATCH_NOT_FOUND:
      return "MATCH_NOT_FOUND";
    case Error_Code.MATCH_JOIN_REJECTED:
      return "MATCH_JOIN_REJECTED";
    case Error_Code.RUNTIME_FUNCTION_NOT_FOUND:
      return "RUNTIME_FUNCTION_NOT_FOUND";
    case Error_Code.RUNTIME_FUNCTION_EXCEPTION:
      return "RUNTIME_FUNCTION_EXCEPTION";
    case Error_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Error_ContextEntry {
  key: string;
  value: string;
}

/** A collection of zero or more notifications. */
export interface Notifications {
  /** Collection of notifications. */
  notifications: Notification[];
}

export interface RemoveFriend {
  /**  */
  user_id: string;
}

/** Application-level heartbeat and connection check. */
export interface Ping {
}

/** Application-level heartbeat and connection check response. */
export interface Pong {
}

/** A snapshot of statuses for some set of users. */
export interface Status {
  /** User statuses. */
  presences: UserPresence[];
}

/** Start receiving status updates for some set of users. */
export interface StatusFollow {
  /** User IDs to follow. */
  user_ids: string[];
  /** Usernames to follow. */
  usernames: string[];
}

/** A batch of status updates for a given user. */
export interface StatusPresenceEvent {
  /** New statuses for the user. */
  joins: UserPresence[];
  /** Previous statuses for the user. */
  leaves: UserPresence[];
}

/** Last pin message by user */
export interface LastPinMessageEvent {
  /** The clan id */
  clan_id: string;
  /** The unique ID of this channel. */
  channel_id: string;
  /** The unique ID of this message. */
  message_id: string;
  /** The stream mode */
  mode: number;
  /** The UserID */
  user_id: string;
  /** The timestamp */
  timestamp_seconds: number;
  /** operation */
  operation: number;
  /** is public */
  is_public: boolean;
}

/** Last seen message by user */
export interface LastSeenMessageEvent {
  /** The clan id */
  clan_id: string;
  /** The unique ID of this channel. */
  channel_id: string;
  /** The unique ID of this message. */
  message_id: string;
  /** The stream mode */
  mode: number;
  /** The timestamp */
  timestamp_seconds: number;
  /**  */
  badge_count: number;
}

/** Message typing event data */
export interface MessageTypingEvent {
  /** The clan id */
  clan_id: string;
  /** The channel this message belongs to. */
  channel_id: string;
  /** Message sender, usually a user ID. */
  sender_id: string;
  /** mode */
  mode: number;
  /** is public */
  is_public: boolean;
}

/** Voice Joined event */
export interface VoiceLeavedEvent {
  /** id voice */
  id: string;
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** voice channel name */
  voice_channel_id: string;
  /** voice user_id */
  voice_user_id: string;
}

/** Voice Joined event */
export interface VoiceJoinedEvent {
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** The channel name */
  clan_name: string;
  /** id voice */
  id: string;
  /** voice participant */
  participant: string;
  /** user id */
  user_id: string;
  /** voice channel label */
  voice_channel_label: string;
  /** voice channel id */
  voice_channel_id: string;
  /** last screenshot */
  last_screenshot: string;
}

/** Voice start event */
export interface VoiceStartedEvent {
  /** id voice */
  id: string;
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** voice channel name */
  voice_channel_id: string;
}

/** Voice start event */
export interface VoiceEndedEvent {
  /** id voice */
  id: string;
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** voice channel name */
  voice_channel_id: string;
}

/** Streaming Joined event */
export interface StreamingLeavedEvent {
  /** id */
  id: string;
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** streaming channel name */
  streaming_channel_id: string;
  /** streaming user_id */
  streaming_user_id: string;
}

/** Streaming Joined event */
export interface StreamingJoinedEvent {
  /** The unique identifier of the chat clan. */
  clan_id: string;
  /** The channel name */
  clan_name: string;
  /** id streaming */
  id: string;
  /** streaming participant */
  participant: string;
  /** user id */
  user_id: string;
  /** streaming channel label */
  streaming_channel_label: string;
  /** streaming channel id */
  streaming_channel_id: string;
}

/** Streaming start event */
export interface StreamingStartedEvent {
  /** clan id */
  clan_id: string;
  /** channel id */
  channel_id: string;
  /** stream url */
  streaming_url: string;
  /** status */
  is_streaming: boolean;
}

/** Streaming start event */
export interface StreamingEndedEvent {
  /** clan id */
  clan_id: string;
  /** channel id */
  channel_id: string;
}

export interface ChannelCreatedEvent {
  /** clan id */
  clan_id: string;
  /** category */
  category_id: string;
  /** creator */
  creator_id: string;
  /** parent id */
  parent_id: string;
  /** channel id */
  channel_id: string;
  /** channel label */
  channel_label: string;
  /** channel private */
  channel_private: number;
  /** channel type */
  channel_type:
    | number
    | undefined;
  /** status */
  status: number;
  /** app url */
  app_url: string;
  /** clan_name */
  clan_name: string;
}

export interface CategoryEvent {
  /** Category creator */
  creator_id: string;
  /** the Clan that category belong to */
  clan_id: string;
  /** Category name */
  category_name: string;
  /**  */
  id: string;
  /**  */
  status: number;
}

export interface RoleEvent {
  role: Role | undefined;
  status: number;
  user_id: string;
  user_add_ids: string[];
  user_remove_ids: string[];
  active_permission_ids: string[];
  remove_permission_ids: string[];
}

export interface ChannelDeletedEvent {
  /** clan id */
  clan_id: string;
  /** category */
  category_id: string;
  /** parent id */
  parent_id: string;
  /** channel id */
  channel_id: string;
  /** deletor */
  deletor: string;
}

export interface ClanDeletedEvent {
  /** clan id */
  clan_id: string;
  /** deletor */
  deletor: string;
}

export interface StickerCreateEvent {
  /** clan id */
  clan_id: string;
  /** source */
  source: string;
  /** shortname */
  shortname: string;
  /** category */
  category: string;
  /** creator_id */
  creator_id: string;
  /** sticker id */
  sticker_id: string;
  /** logo */
  logo: string;
  /** clan name */
  clan_name: string;
}

export interface StickerUpdateEvent {
  /** shortname */
  shortname: string;
  /** sticker id */
  sticker_id: string;
  /** user id update */
  user_id: string;
}

export interface StickerDeleteEvent {
  /** sticker id */
  sticker_id: string;
  /** user id delete */
  user_id: string;
}

export interface ChannelUpdatedEvent {
  /** clan id */
  clan_id: string;
  /** category */
  category_id: string;
  /** creator */
  creator_id: string;
  /** parent id */
  parent_id: string;
  /** channel id */
  channel_id: string;
  /** channel label */
  channel_label: string;
  /** channel type */
  channel_type:
    | number
    | undefined;
  /** status */
  status: number;
  /** meeting code */
  meeting_code: string;
  /** error */
  is_error: boolean;
  /** channel private */
  channel_private: boolean;
  /** app url */
  app_url: string;
  /** e2ee */
  e2ee: number;
  /** topic */
  topic: string;
  /**  */
  age_restricted: number;
  /**  */
  active: number;
}

/** Stop receiving status updates for some set of users. */
export interface StatusUnfollow {
  /** Users to unfollow. */
  user_ids: string[];
}

/** Set the user's own status. */
export interface StatusUpdate {
  /** Status string to set, if not present the user will appear offline. */
  status: string | undefined;
}

/** Represents identifying information for a stream. */
export interface Stream {
  /** Mode identifies the type of stream. */
  mode: number;
  /** Subject is the primary identifier, if any. */
  channel_id: string;
  /** Subcontext is a secondary identifier, if any. */
  clan_id: string;
  /** The label is an arbitrary identifying string, if the stream has one. */
  label: string;
}

/** A data message delivered over a stream. */
export interface StreamData {
  /** The stream this data message relates to. */
  stream:
    | Stream
    | undefined;
  /** The sender, if any. */
  sender:
    | UserPresence
    | undefined;
  /** Arbitrary contents of the data message. */
  data: string;
  /** True if this data was delivered reliably, false otherwise. */
  reliable: boolean;
}

/** A set of joins and leaves on a particular stream. */
export interface StreamPresenceEvent {
  /** The stream this event relates to. */
  stream:
    | Stream
    | undefined;
  /** Presences joining the stream as part of this event, if any. */
  joins: UserPresence[];
  /** Presences leaving the stream as part of this event, if any. */
  leaves: UserPresence[];
}

/** A user session associated to a stream, usually through a list operation or a join/leave event. */
export interface UserPresence {
  /** The user this presence belongs to. */
  user_id: string;
  /** A unique session ID identifying the particular connection, because the user may have many. */
  session_id: string;
  /** The username for display purposes. */
  username: string;
  /** Whether this presence generates persistent data/messages, if applicable for the stream type. */
  persistence: boolean;
  /** A user-set status message for this stream, if applicable. */
  status:
    | string
    | undefined;
  /**  */
  is_mobile: boolean;
  /** Metadata */
  metadata: string;
}

/** A custom status presence */
export interface CustomStatusEvent {
  /** the clan id */
  clan_id: string;
  /** the user id */
  user_id: string;
  /** username */
  username: string;
  /** the status */
  status: string;
  /** time reset */
  time_reset: number;
  /** no clear */
  no_clear: boolean;
}

/** A event when user is added to channel */
export interface UserChannelAdded {
  /** the channel id */
  channel_desc:
    | ChannelDescription1
    | undefined;
  /** the user */
  users: UserProfileRedis[];
  /** the custom status */
  status: string;
  /** the clan id */
  clan_id: string;
  /**  */
  caller:
    | UserProfileRedis
    | undefined;
  /**  */
  create_time_second: number;
  /**  */
  active: number;
}

/**  */
export interface UserChannelRemoved {
  /** the channel id */
  channel_id: string;
  /** the user */
  user_ids: string[];
  /** the channel type */
  channel_type: number;
  /** the clan_id */
  clan_id: string;
}

/**  */
export interface UserClanRemoved {
  /** the clan id */
  clan_id: string;
  /** the user */
  user_ids: string[];
}

/** clan updated event */
export interface ClanUpdatedEvent {
  /** clan id */
  clan_id: string;
  /** clan name */
  clan_name: string;
  /** logo */
  logo: string;
  /** banner */
  banner: string;
  /** status */
  status: number;
  /** is onboarding */
  is_onboarding: boolean;
  /** welcome channel id */
  welcome_channel_id: string;
  /** onboarding_banner. */
  onboarding_banner: string;
}

/** clan profile updated event */
export interface ClanProfileUpdatedEvent {
  /** the user id */
  user_id: string;
  /** the clan_nick */
  clan_nick: string;
  /** the avatar */
  clan_avatar: string;
  /** the clan_id */
  clan_id: string;
}

/** user profile updated event */
export interface UserProfileUpdatedEvent {
  /** the user id */
  user_id: string;
  /** the display_name */
  display_name: string;
  /** the avatar */
  avatar: string;
  /** the about_me */
  about_me: string;
  /** the channel_id */
  channel_id: string;
  /** the clan_id */
  clan_id: string;
  /** the encrypt_private_key */
  encrypt_private_key: string;
}

/** A event when user is added to channel */
export interface UserProfileRedis {
  /** User IDs to follow. */
  user_id: string;
  /** Username to follow. */
  username: string;
  /** Avatar to follow. */
  avatar: string;
  /** Display name */
  display_name: string;
  /** about me */
  about_me: string;
  /** custom status */
  custom_status: string;
  /** create time */
  create_time_second: number;
  /** FCM token */
  fcm_tokens: FCMTokens[];
  /** isOnline */
  online: boolean;
  /** Metadata */
  metadata: string;
  /** is disabled */
  is_disabled: boolean;
  /** clans */
  joined_clans: string[];
  /** public key */
  pubkey: string;
  /** mezon id */
  mezon_id: string;
  /** app token */
  app_token: string;
}

export interface FCMTokens {
  /** deviceID to follow. */
  device_id: string;
  /** tokenID to follow. */
  token_id: string;
  /** platform to follow. */
  platform: string;
}

export interface CheckNameExistedEvent {
  /** name */
  name: string;
  /** condition_id */
  condition_id: string;
  /** is exist */
  exist: boolean;
  /** type check */
  type: number;
}

/** Notification setting record */
export interface NotificationChannelCategorySetting {
  /** Notification id */
  id: string;
  /**  */
  channel_category_label: string;
  /** Notification title */
  notification_setting_type: number;
  /**  */
  channel_category_title: string;
  /**  */
  action: number;
}

export interface EventEmoji {
  id: string;
  clan_id: string;
  short_name: string;
  source: string;
  category: string;
  action: number;
  user_id: string;
  logo: string;
  clan_name: string;
}

export interface PermissionSetEvent {
  caller: string;
  role_id: string;
  user_id: string;
  channel_id: string;
  permission_updates: PermissionUpdate[];
}

export interface PermissionChangedEvent {
  user_id: string;
  channel_id: string;
  add_permissions: PermissionUpdate[];
  remove_permissions: PermissionUpdate[];
  default_permissions: PermissionUpdate[];
}

export interface MessageButtonClicked {
  message_id: string;
  channel_id: string;
  button_id: string;
  sender_id: string;
  user_id: string;
  extra_data: string;
}

export interface UnmuteEvent {
  /** channel id */
  channel_id: string;
  /** category id */
  category_id: string;
  /** clan id */
  clan_id: string;
}

export interface ListActivity {
  acts: UserActivity[];
}

export interface DropdownBoxSelected {
  message_id: string;
  channel_id: string;
  selectbox_id: string;
  sender_id: string;
  user_id: string;
  values: string[];
}

export interface SdTopicEvent {
  id: string;
  clan_id: string;
  channel_id: string;
  message_id: string;
  user_id: string;
  last_sent_message: ChannelMessageHeader | undefined;
  message: ChannelMessage | undefined;
}

export interface ChannelAppEvent {
  user_id: string;
  username: string;
  clan_id: string;
  channel_id: string;
  action: number;
}

export interface UserStatusEvent {
  user_id: string;
  custom_status: string;
}

export interface JoinChannelAppData {
  user_id: string;
  username: string;
  hash: string;
}

export interface UnpinMessageEvent {
  id: string;
  message_id: string;
  channel_id: string;
  clan_id: string;
}

export interface HandleParticipantMeetStateEvent {
  /** clan id */
  clan_id: string;
  /** channel id */
  channel_id: string;
  /** display name */
  display_name: string;
  /** state (0: join, 1: leave) */
  state: number;
}

export interface DeleteAccountEvent {
  /** user id */
  user_id: string;
}

function createBaseEnvelope(): Envelope {
  return {
    cid: "",
    channel: undefined,
    clan_join: undefined,
    channel_join: undefined,
    channel_leave: undefined,
    channel_message: undefined,
    channel_message_ack: undefined,
    channel_message_send: undefined,
    channel_message_update: undefined,
    channel_message_remove: undefined,
    channel_presence_event: undefined,
    error: undefined,
    notifications: undefined,
    rpc: undefined,
    status: undefined,
    status_follow: undefined,
    status_presence_event: undefined,
    status_unfollow: undefined,
    status_update: undefined,
    stream_data: undefined,
    stream_presence_event: undefined,
    ping: undefined,
    pong: undefined,
    message_typing_event: undefined,
    last_seen_message_event: undefined,
    message_reaction_event: undefined,
    voice_joined_event: undefined,
    voice_leaved_event: undefined,
    voice_started_event: undefined,
    voice_ended_event: undefined,
    channel_created_event: undefined,
    channel_deleted_event: undefined,
    channel_updated_event: undefined,
    last_pin_message_event: undefined,
    custom_status_event: undefined,
    user_channel_added_event: undefined,
    user_channel_removed_event: undefined,
    user_clan_removed_event: undefined,
    clan_updated_event: undefined,
    clan_profile_updated_event: undefined,
    check_name_existed_event: undefined,
    user_profile_updated_event: undefined,
    add_clan_user_event: undefined,
    clan_event_created: undefined,
    role_assign_event: undefined,
    clan_deleted_event: undefined,
    give_coffee_event: undefined,
    sticker_create_event: undefined,
    sticker_update_event: undefined,
    sticker_delete_event: undefined,
    role_event: undefined,
    event_emoji: undefined,
    streaming_joined_event: undefined,
    streaming_leaved_event: undefined,
    streaming_started_event: undefined,
    streaming_ended_event: undefined,
    permission_set_event: undefined,
    permission_changed_event: undefined,
    token_sent_event: undefined,
    message_button_clicked: undefined,
    unmute_event: undefined,
    webrtc_signaling_fwd: undefined,
    list_activity: undefined,
    dropdown_box_selected: undefined,
    incoming_call_push: undefined,
    sd_topic_event: undefined,
    follow_event: undefined,
    channel_app_event: undefined,
    user_status_event: undefined,
    remove_friend: undefined,
    webhook_event: undefined,
    noti_user_channel: undefined,
    join_channel_app_data: undefined,
    canvas_event: undefined,
    unpin_message_event: undefined,
    category_event: undefined,
    handle_participant_meet_state_event: undefined,
    delete_account_event: undefined,
  };
}

export const Envelope = {
  encode(message: Envelope, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cid !== "") {
      writer.uint32(10).string(message.cid);
    }
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();
    }
    if (message.clan_join !== undefined) {
      ClanJoin.encode(message.clan_join, writer.uint32(26).fork()).ldelim();
    }
    if (message.channel_join !== undefined) {
      ChannelJoin.encode(message.channel_join, writer.uint32(34).fork()).ldelim();
    }
    if (message.channel_leave !== undefined) {
      ChannelLeave.encode(message.channel_leave, writer.uint32(42).fork()).ldelim();
    }
    if (message.channel_message !== undefined) {
      ChannelMessage.encode(message.channel_message, writer.uint32(50).fork()).ldelim();
    }
    if (message.channel_message_ack !== undefined) {
      ChannelMessageAck.encode(message.channel_message_ack, writer.uint32(58).fork()).ldelim();
    }
    if (message.channel_message_send !== undefined) {
      ChannelMessageSend.encode(message.channel_message_send, writer.uint32(66).fork()).ldelim();
    }
    if (message.channel_message_update !== undefined) {
      ChannelMessageUpdate.encode(message.channel_message_update, writer.uint32(74).fork()).ldelim();
    }
    if (message.channel_message_remove !== undefined) {
      ChannelMessageRemove.encode(message.channel_message_remove, writer.uint32(82).fork()).ldelim();
    }
    if (message.channel_presence_event !== undefined) {
      ChannelPresenceEvent.encode(message.channel_presence_event, writer.uint32(90).fork()).ldelim();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(98).fork()).ldelim();
    }
    if (message.notifications !== undefined) {
      Notifications.encode(message.notifications, writer.uint32(106).fork()).ldelim();
    }
    if (message.rpc !== undefined) {
      Rpc.encode(message.rpc, writer.uint32(114).fork()).ldelim();
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(122).fork()).ldelim();
    }
    if (message.status_follow !== undefined) {
      StatusFollow.encode(message.status_follow, writer.uint32(130).fork()).ldelim();
    }
    if (message.status_presence_event !== undefined) {
      StatusPresenceEvent.encode(message.status_presence_event, writer.uint32(138).fork()).ldelim();
    }
    if (message.status_unfollow !== undefined) {
      StatusUnfollow.encode(message.status_unfollow, writer.uint32(146).fork()).ldelim();
    }
    if (message.status_update !== undefined) {
      StatusUpdate.encode(message.status_update, writer.uint32(154).fork()).ldelim();
    }
    if (message.stream_data !== undefined) {
      StreamData.encode(message.stream_data, writer.uint32(162).fork()).ldelim();
    }
    if (message.stream_presence_event !== undefined) {
      StreamPresenceEvent.encode(message.stream_presence_event, writer.uint32(170).fork()).ldelim();
    }
    if (message.ping !== undefined) {
      Ping.encode(message.ping, writer.uint32(178).fork()).ldelim();
    }
    if (message.pong !== undefined) {
      Pong.encode(message.pong, writer.uint32(186).fork()).ldelim();
    }
    if (message.message_typing_event !== undefined) {
      MessageTypingEvent.encode(message.message_typing_event, writer.uint32(194).fork()).ldelim();
    }
    if (message.last_seen_message_event !== undefined) {
      LastSeenMessageEvent.encode(message.last_seen_message_event, writer.uint32(202).fork()).ldelim();
    }
    if (message.message_reaction_event !== undefined) {
      MessageReaction.encode(message.message_reaction_event, writer.uint32(210).fork()).ldelim();
    }
    if (message.voice_joined_event !== undefined) {
      VoiceJoinedEvent.encode(message.voice_joined_event, writer.uint32(218).fork()).ldelim();
    }
    if (message.voice_leaved_event !== undefined) {
      VoiceLeavedEvent.encode(message.voice_leaved_event, writer.uint32(226).fork()).ldelim();
    }
    if (message.voice_started_event !== undefined) {
      VoiceStartedEvent.encode(message.voice_started_event, writer.uint32(234).fork()).ldelim();
    }
    if (message.voice_ended_event !== undefined) {
      VoiceEndedEvent.encode(message.voice_ended_event, writer.uint32(242).fork()).ldelim();
    }
    if (message.channel_created_event !== undefined) {
      ChannelCreatedEvent.encode(message.channel_created_event, writer.uint32(250).fork()).ldelim();
    }
    if (message.channel_deleted_event !== undefined) {
      ChannelDeletedEvent.encode(message.channel_deleted_event, writer.uint32(258).fork()).ldelim();
    }
    if (message.channel_updated_event !== undefined) {
      ChannelUpdatedEvent.encode(message.channel_updated_event, writer.uint32(266).fork()).ldelim();
    }
    if (message.last_pin_message_event !== undefined) {
      LastPinMessageEvent.encode(message.last_pin_message_event, writer.uint32(274).fork()).ldelim();
    }
    if (message.custom_status_event !== undefined) {
      CustomStatusEvent.encode(message.custom_status_event, writer.uint32(282).fork()).ldelim();
    }
    if (message.user_channel_added_event !== undefined) {
      UserChannelAdded.encode(message.user_channel_added_event, writer.uint32(290).fork()).ldelim();
    }
    if (message.user_channel_removed_event !== undefined) {
      UserChannelRemoved.encode(message.user_channel_removed_event, writer.uint32(298).fork()).ldelim();
    }
    if (message.user_clan_removed_event !== undefined) {
      UserClanRemoved.encode(message.user_clan_removed_event, writer.uint32(306).fork()).ldelim();
    }
    if (message.clan_updated_event !== undefined) {
      ClanUpdatedEvent.encode(message.clan_updated_event, writer.uint32(314).fork()).ldelim();
    }
    if (message.clan_profile_updated_event !== undefined) {
      ClanProfileUpdatedEvent.encode(message.clan_profile_updated_event, writer.uint32(322).fork()).ldelim();
    }
    if (message.check_name_existed_event !== undefined) {
      CheckNameExistedEvent.encode(message.check_name_existed_event, writer.uint32(330).fork()).ldelim();
    }
    if (message.user_profile_updated_event !== undefined) {
      UserProfileUpdatedEvent.encode(message.user_profile_updated_event, writer.uint32(338).fork()).ldelim();
    }
    if (message.add_clan_user_event !== undefined) {
      AddClanUserEvent.encode(message.add_clan_user_event, writer.uint32(346).fork()).ldelim();
    }
    if (message.clan_event_created !== undefined) {
      CreateEventRequest.encode(message.clan_event_created, writer.uint32(354).fork()).ldelim();
    }
    if (message.role_assign_event !== undefined) {
      RoleAssignedEvent.encode(message.role_assign_event, writer.uint32(362).fork()).ldelim();
    }
    if (message.clan_deleted_event !== undefined) {
      ClanDeletedEvent.encode(message.clan_deleted_event, writer.uint32(370).fork()).ldelim();
    }
    if (message.give_coffee_event !== undefined) {
      GiveCoffeeEvent.encode(message.give_coffee_event, writer.uint32(378).fork()).ldelim();
    }
    if (message.sticker_create_event !== undefined) {
      StickerCreateEvent.encode(message.sticker_create_event, writer.uint32(386).fork()).ldelim();
    }
    if (message.sticker_update_event !== undefined) {
      StickerUpdateEvent.encode(message.sticker_update_event, writer.uint32(394).fork()).ldelim();
    }
    if (message.sticker_delete_event !== undefined) {
      StickerDeleteEvent.encode(message.sticker_delete_event, writer.uint32(402).fork()).ldelim();
    }
    if (message.role_event !== undefined) {
      RoleEvent.encode(message.role_event, writer.uint32(410).fork()).ldelim();
    }
    if (message.event_emoji !== undefined) {
      EventEmoji.encode(message.event_emoji, writer.uint32(418).fork()).ldelim();
    }
    if (message.streaming_joined_event !== undefined) {
      StreamingJoinedEvent.encode(message.streaming_joined_event, writer.uint32(426).fork()).ldelim();
    }
    if (message.streaming_leaved_event !== undefined) {
      StreamingLeavedEvent.encode(message.streaming_leaved_event, writer.uint32(434).fork()).ldelim();
    }
    if (message.streaming_started_event !== undefined) {
      StreamingStartedEvent.encode(message.streaming_started_event, writer.uint32(442).fork()).ldelim();
    }
    if (message.streaming_ended_event !== undefined) {
      StreamingEndedEvent.encode(message.streaming_ended_event, writer.uint32(450).fork()).ldelim();
    }
    if (message.permission_set_event !== undefined) {
      PermissionSetEvent.encode(message.permission_set_event, writer.uint32(458).fork()).ldelim();
    }
    if (message.permission_changed_event !== undefined) {
      PermissionChangedEvent.encode(message.permission_changed_event, writer.uint32(466).fork()).ldelim();
    }
    if (message.token_sent_event !== undefined) {
      TokenSentEvent.encode(message.token_sent_event, writer.uint32(474).fork()).ldelim();
    }
    if (message.message_button_clicked !== undefined) {
      MessageButtonClicked.encode(message.message_button_clicked, writer.uint32(482).fork()).ldelim();
    }
    if (message.unmute_event !== undefined) {
      UnmuteEvent.encode(message.unmute_event, writer.uint32(490).fork()).ldelim();
    }
    if (message.webrtc_signaling_fwd !== undefined) {
      WebrtcSignalingFwd.encode(message.webrtc_signaling_fwd, writer.uint32(498).fork()).ldelim();
    }
    if (message.list_activity !== undefined) {
      ListActivity.encode(message.list_activity, writer.uint32(506).fork()).ldelim();
    }
    if (message.dropdown_box_selected !== undefined) {
      DropdownBoxSelected.encode(message.dropdown_box_selected, writer.uint32(514).fork()).ldelim();
    }
    if (message.incoming_call_push !== undefined) {
      IncomingCallPush.encode(message.incoming_call_push, writer.uint32(522).fork()).ldelim();
    }
    if (message.sd_topic_event !== undefined) {
      SdTopicEvent.encode(message.sd_topic_event, writer.uint32(530).fork()).ldelim();
    }
    if (message.follow_event !== undefined) {
      FollowEvent.encode(message.follow_event, writer.uint32(538).fork()).ldelim();
    }
    if (message.channel_app_event !== undefined) {
      ChannelAppEvent.encode(message.channel_app_event, writer.uint32(546).fork()).ldelim();
    }
    if (message.user_status_event !== undefined) {
      UserStatusEvent.encode(message.user_status_event, writer.uint32(554).fork()).ldelim();
    }
    if (message.remove_friend !== undefined) {
      RemoveFriend.encode(message.remove_friend, writer.uint32(562).fork()).ldelim();
    }
    if (message.webhook_event !== undefined) {
      Webhook.encode(message.webhook_event, writer.uint32(570).fork()).ldelim();
    }
    if (message.noti_user_channel !== undefined) {
      NotificationUserChannel.encode(message.noti_user_channel, writer.uint32(578).fork()).ldelim();
    }
    if (message.join_channel_app_data !== undefined) {
      JoinChannelAppData.encode(message.join_channel_app_data, writer.uint32(586).fork()).ldelim();
    }
    if (message.canvas_event !== undefined) {
      ChannelCanvas.encode(message.canvas_event, writer.uint32(594).fork()).ldelim();
    }
    if (message.unpin_message_event !== undefined) {
      UnpinMessageEvent.encode(message.unpin_message_event, writer.uint32(602).fork()).ldelim();
    }
    if (message.category_event !== undefined) {
      CategoryEvent.encode(message.category_event, writer.uint32(610).fork()).ldelim();
    }
    if (message.handle_participant_meet_state_event !== undefined) {
      HandleParticipantMeetStateEvent.encode(message.handle_participant_meet_state_event, writer.uint32(618).fork())
        .ldelim();
    }
    if (message.delete_account_event !== undefined) {
      DeleteAccountEvent.encode(message.delete_account_event, writer.uint32(626).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Envelope {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvelope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_join = ClanJoin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_join = ChannelJoin.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.channel_leave = ChannelLeave.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.channel_message = ChannelMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.channel_message_ack = ChannelMessageAck.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.channel_message_send = ChannelMessageSend.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.channel_message_update = ChannelMessageUpdate.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.channel_message_remove = ChannelMessageRemove.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.channel_presence_event = ChannelPresenceEvent.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.notifications = Notifications.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.rpc = Rpc.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.status_follow = StatusFollow.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.status_presence_event = StatusPresenceEvent.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.status_unfollow = StatusUnfollow.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.status_update = StatusUpdate.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.stream_data = StreamData.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.stream_presence_event = StreamPresenceEvent.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.ping = Ping.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.pong = Pong.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.message_typing_event = MessageTypingEvent.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.last_seen_message_event = LastSeenMessageEvent.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.message_reaction_event = MessageReaction.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.voice_joined_event = VoiceJoinedEvent.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.voice_leaved_event = VoiceLeavedEvent.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.voice_started_event = VoiceStartedEvent.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.voice_ended_event = VoiceEndedEvent.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.channel_created_event = ChannelCreatedEvent.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.channel_deleted_event = ChannelDeletedEvent.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.channel_updated_event = ChannelUpdatedEvent.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.last_pin_message_event = LastPinMessageEvent.decode(reader, reader.uint32());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.custom_status_event = CustomStatusEvent.decode(reader, reader.uint32());
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.user_channel_added_event = UserChannelAdded.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.user_channel_removed_event = UserChannelRemoved.decode(reader, reader.uint32());
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.user_clan_removed_event = UserClanRemoved.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.clan_updated_event = ClanUpdatedEvent.decode(reader, reader.uint32());
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.clan_profile_updated_event = ClanProfileUpdatedEvent.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.check_name_existed_event = CheckNameExistedEvent.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.user_profile_updated_event = UserProfileUpdatedEvent.decode(reader, reader.uint32());
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.add_clan_user_event = AddClanUserEvent.decode(reader, reader.uint32());
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.clan_event_created = CreateEventRequest.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.role_assign_event = RoleAssignedEvent.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.clan_deleted_event = ClanDeletedEvent.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.give_coffee_event = GiveCoffeeEvent.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.sticker_create_event = StickerCreateEvent.decode(reader, reader.uint32());
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.sticker_update_event = StickerUpdateEvent.decode(reader, reader.uint32());
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.sticker_delete_event = StickerDeleteEvent.decode(reader, reader.uint32());
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.role_event = RoleEvent.decode(reader, reader.uint32());
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.event_emoji = EventEmoji.decode(reader, reader.uint32());
          continue;
        case 53:
          if (tag !== 426) {
            break;
          }

          message.streaming_joined_event = StreamingJoinedEvent.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.streaming_leaved_event = StreamingLeavedEvent.decode(reader, reader.uint32());
          continue;
        case 55:
          if (tag !== 442) {
            break;
          }

          message.streaming_started_event = StreamingStartedEvent.decode(reader, reader.uint32());
          continue;
        case 56:
          if (tag !== 450) {
            break;
          }

          message.streaming_ended_event = StreamingEndedEvent.decode(reader, reader.uint32());
          continue;
        case 57:
          if (tag !== 458) {
            break;
          }

          message.permission_set_event = PermissionSetEvent.decode(reader, reader.uint32());
          continue;
        case 58:
          if (tag !== 466) {
            break;
          }

          message.permission_changed_event = PermissionChangedEvent.decode(reader, reader.uint32());
          continue;
        case 59:
          if (tag !== 474) {
            break;
          }

          message.token_sent_event = TokenSentEvent.decode(reader, reader.uint32());
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.message_button_clicked = MessageButtonClicked.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag !== 490) {
            break;
          }

          message.unmute_event = UnmuteEvent.decode(reader, reader.uint32());
          continue;
        case 62:
          if (tag !== 498) {
            break;
          }

          message.webrtc_signaling_fwd = WebrtcSignalingFwd.decode(reader, reader.uint32());
          continue;
        case 63:
          if (tag !== 506) {
            break;
          }

          message.list_activity = ListActivity.decode(reader, reader.uint32());
          continue;
        case 64:
          if (tag !== 514) {
            break;
          }

          message.dropdown_box_selected = DropdownBoxSelected.decode(reader, reader.uint32());
          continue;
        case 65:
          if (tag !== 522) {
            break;
          }

          message.incoming_call_push = IncomingCallPush.decode(reader, reader.uint32());
          continue;
        case 66:
          if (tag !== 530) {
            break;
          }

          message.sd_topic_event = SdTopicEvent.decode(reader, reader.uint32());
          continue;
        case 67:
          if (tag !== 538) {
            break;
          }

          message.follow_event = FollowEvent.decode(reader, reader.uint32());
          continue;
        case 68:
          if (tag !== 546) {
            break;
          }

          message.channel_app_event = ChannelAppEvent.decode(reader, reader.uint32());
          continue;
        case 69:
          if (tag !== 554) {
            break;
          }

          message.user_status_event = UserStatusEvent.decode(reader, reader.uint32());
          continue;
        case 70:
          if (tag !== 562) {
            break;
          }

          message.remove_friend = RemoveFriend.decode(reader, reader.uint32());
          continue;
        case 71:
          if (tag !== 570) {
            break;
          }

          message.webhook_event = Webhook.decode(reader, reader.uint32());
          continue;
        case 72:
          if (tag !== 578) {
            break;
          }

          message.noti_user_channel = NotificationUserChannel.decode(reader, reader.uint32());
          continue;
        case 73:
          if (tag !== 586) {
            break;
          }

          message.join_channel_app_data = JoinChannelAppData.decode(reader, reader.uint32());
          continue;
        case 74:
          if (tag !== 594) {
            break;
          }

          message.canvas_event = ChannelCanvas.decode(reader, reader.uint32());
          continue;
        case 75:
          if (tag !== 602) {
            break;
          }

          message.unpin_message_event = UnpinMessageEvent.decode(reader, reader.uint32());
          continue;
        case 76:
          if (tag !== 610) {
            break;
          }

          message.category_event = CategoryEvent.decode(reader, reader.uint32());
          continue;
        case 77:
          if (tag !== 618) {
            break;
          }

          message.handle_participant_meet_state_event = HandleParticipantMeetStateEvent.decode(reader, reader.uint32());
          continue;
        case 78:
          if (tag !== 626) {
            break;
          }

          message.delete_account_event = DeleteAccountEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Envelope {
    return {
      cid: isSet(object.cid) ? globalThis.String(object.cid) : "",
      channel: isSet(object.channel) ? Channel.fromJSON(object.channel) : undefined,
      clan_join: isSet(object.clan_join) ? ClanJoin.fromJSON(object.clan_join) : undefined,
      channel_join: isSet(object.channel_join) ? ChannelJoin.fromJSON(object.channel_join) : undefined,
      channel_leave: isSet(object.channel_leave) ? ChannelLeave.fromJSON(object.channel_leave) : undefined,
      channel_message: isSet(object.channel_message) ? ChannelMessage.fromJSON(object.channel_message) : undefined,
      channel_message_ack: isSet(object.channel_message_ack)
        ? ChannelMessageAck.fromJSON(object.channel_message_ack)
        : undefined,
      channel_message_send: isSet(object.channel_message_send)
        ? ChannelMessageSend.fromJSON(object.channel_message_send)
        : undefined,
      channel_message_update: isSet(object.channel_message_update)
        ? ChannelMessageUpdate.fromJSON(object.channel_message_update)
        : undefined,
      channel_message_remove: isSet(object.channel_message_remove)
        ? ChannelMessageRemove.fromJSON(object.channel_message_remove)
        : undefined,
      channel_presence_event: isSet(object.channel_presence_event)
        ? ChannelPresenceEvent.fromJSON(object.channel_presence_event)
        : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      notifications: isSet(object.notifications) ? Notifications.fromJSON(object.notifications) : undefined,
      rpc: isSet(object.rpc) ? Rpc.fromJSON(object.rpc) : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      status_follow: isSet(object.status_follow) ? StatusFollow.fromJSON(object.status_follow) : undefined,
      status_presence_event: isSet(object.status_presence_event)
        ? StatusPresenceEvent.fromJSON(object.status_presence_event)
        : undefined,
      status_unfollow: isSet(object.status_unfollow) ? StatusUnfollow.fromJSON(object.status_unfollow) : undefined,
      status_update: isSet(object.status_update) ? StatusUpdate.fromJSON(object.status_update) : undefined,
      stream_data: isSet(object.stream_data) ? StreamData.fromJSON(object.stream_data) : undefined,
      stream_presence_event: isSet(object.stream_presence_event)
        ? StreamPresenceEvent.fromJSON(object.stream_presence_event)
        : undefined,
      ping: isSet(object.ping) ? Ping.fromJSON(object.ping) : undefined,
      pong: isSet(object.pong) ? Pong.fromJSON(object.pong) : undefined,
      message_typing_event: isSet(object.message_typing_event)
        ? MessageTypingEvent.fromJSON(object.message_typing_event)
        : undefined,
      last_seen_message_event: isSet(object.last_seen_message_event)
        ? LastSeenMessageEvent.fromJSON(object.last_seen_message_event)
        : undefined,
      message_reaction_event: isSet(object.message_reaction_event)
        ? MessageReaction.fromJSON(object.message_reaction_event)
        : undefined,
      voice_joined_event: isSet(object.voice_joined_event)
        ? VoiceJoinedEvent.fromJSON(object.voice_joined_event)
        : undefined,
      voice_leaved_event: isSet(object.voice_leaved_event)
        ? VoiceLeavedEvent.fromJSON(object.voice_leaved_event)
        : undefined,
      voice_started_event: isSet(object.voice_started_event)
        ? VoiceStartedEvent.fromJSON(object.voice_started_event)
        : undefined,
      voice_ended_event: isSet(object.voice_ended_event)
        ? VoiceEndedEvent.fromJSON(object.voice_ended_event)
        : undefined,
      channel_created_event: isSet(object.channel_created_event)
        ? ChannelCreatedEvent.fromJSON(object.channel_created_event)
        : undefined,
      channel_deleted_event: isSet(object.channel_deleted_event)
        ? ChannelDeletedEvent.fromJSON(object.channel_deleted_event)
        : undefined,
      channel_updated_event: isSet(object.channel_updated_event)
        ? ChannelUpdatedEvent.fromJSON(object.channel_updated_event)
        : undefined,
      last_pin_message_event: isSet(object.last_pin_message_event)
        ? LastPinMessageEvent.fromJSON(object.last_pin_message_event)
        : undefined,
      custom_status_event: isSet(object.custom_status_event)
        ? CustomStatusEvent.fromJSON(object.custom_status_event)
        : undefined,
      user_channel_added_event: isSet(object.user_channel_added_event)
        ? UserChannelAdded.fromJSON(object.user_channel_added_event)
        : undefined,
      user_channel_removed_event: isSet(object.user_channel_removed_event)
        ? UserChannelRemoved.fromJSON(object.user_channel_removed_event)
        : undefined,
      user_clan_removed_event: isSet(object.user_clan_removed_event)
        ? UserClanRemoved.fromJSON(object.user_clan_removed_event)
        : undefined,
      clan_updated_event: isSet(object.clan_updated_event)
        ? ClanUpdatedEvent.fromJSON(object.clan_updated_event)
        : undefined,
      clan_profile_updated_event: isSet(object.clan_profile_updated_event)
        ? ClanProfileUpdatedEvent.fromJSON(object.clan_profile_updated_event)
        : undefined,
      check_name_existed_event: isSet(object.check_name_existed_event)
        ? CheckNameExistedEvent.fromJSON(object.check_name_existed_event)
        : undefined,
      user_profile_updated_event: isSet(object.user_profile_updated_event)
        ? UserProfileUpdatedEvent.fromJSON(object.user_profile_updated_event)
        : undefined,
      add_clan_user_event: isSet(object.add_clan_user_event)
        ? AddClanUserEvent.fromJSON(object.add_clan_user_event)
        : undefined,
      clan_event_created: isSet(object.clan_event_created)
        ? CreateEventRequest.fromJSON(object.clan_event_created)
        : undefined,
      role_assign_event: isSet(object.role_assign_event)
        ? RoleAssignedEvent.fromJSON(object.role_assign_event)
        : undefined,
      clan_deleted_event: isSet(object.clan_deleted_event)
        ? ClanDeletedEvent.fromJSON(object.clan_deleted_event)
        : undefined,
      give_coffee_event: isSet(object.give_coffee_event)
        ? GiveCoffeeEvent.fromJSON(object.give_coffee_event)
        : undefined,
      sticker_create_event: isSet(object.sticker_create_event)
        ? StickerCreateEvent.fromJSON(object.sticker_create_event)
        : undefined,
      sticker_update_event: isSet(object.sticker_update_event)
        ? StickerUpdateEvent.fromJSON(object.sticker_update_event)
        : undefined,
      sticker_delete_event: isSet(object.sticker_delete_event)
        ? StickerDeleteEvent.fromJSON(object.sticker_delete_event)
        : undefined,
      role_event: isSet(object.role_event) ? RoleEvent.fromJSON(object.role_event) : undefined,
      event_emoji: isSet(object.event_emoji) ? EventEmoji.fromJSON(object.event_emoji) : undefined,
      streaming_joined_event: isSet(object.streaming_joined_event)
        ? StreamingJoinedEvent.fromJSON(object.streaming_joined_event)
        : undefined,
      streaming_leaved_event: isSet(object.streaming_leaved_event)
        ? StreamingLeavedEvent.fromJSON(object.streaming_leaved_event)
        : undefined,
      streaming_started_event: isSet(object.streaming_started_event)
        ? StreamingStartedEvent.fromJSON(object.streaming_started_event)
        : undefined,
      streaming_ended_event: isSet(object.streaming_ended_event)
        ? StreamingEndedEvent.fromJSON(object.streaming_ended_event)
        : undefined,
      permission_set_event: isSet(object.permission_set_event)
        ? PermissionSetEvent.fromJSON(object.permission_set_event)
        : undefined,
      permission_changed_event: isSet(object.permission_changed_event)
        ? PermissionChangedEvent.fromJSON(object.permission_changed_event)
        : undefined,
      token_sent_event: isSet(object.token_sent_event) ? TokenSentEvent.fromJSON(object.token_sent_event) : undefined,
      message_button_clicked: isSet(object.message_button_clicked)
        ? MessageButtonClicked.fromJSON(object.message_button_clicked)
        : undefined,
      unmute_event: isSet(object.unmute_event) ? UnmuteEvent.fromJSON(object.unmute_event) : undefined,
      webrtc_signaling_fwd: isSet(object.webrtc_signaling_fwd)
        ? WebrtcSignalingFwd.fromJSON(object.webrtc_signaling_fwd)
        : undefined,
      list_activity: isSet(object.list_activity) ? ListActivity.fromJSON(object.list_activity) : undefined,
      dropdown_box_selected: isSet(object.dropdown_box_selected)
        ? DropdownBoxSelected.fromJSON(object.dropdown_box_selected)
        : undefined,
      incoming_call_push: isSet(object.incoming_call_push)
        ? IncomingCallPush.fromJSON(object.incoming_call_push)
        : undefined,
      sd_topic_event: isSet(object.sd_topic_event) ? SdTopicEvent.fromJSON(object.sd_topic_event) : undefined,
      follow_event: isSet(object.follow_event) ? FollowEvent.fromJSON(object.follow_event) : undefined,
      channel_app_event: isSet(object.channel_app_event)
        ? ChannelAppEvent.fromJSON(object.channel_app_event)
        : undefined,
      user_status_event: isSet(object.user_status_event)
        ? UserStatusEvent.fromJSON(object.user_status_event)
        : undefined,
      remove_friend: isSet(object.remove_friend) ? RemoveFriend.fromJSON(object.remove_friend) : undefined,
      webhook_event: isSet(object.webhook_event) ? Webhook.fromJSON(object.webhook_event) : undefined,
      noti_user_channel: isSet(object.noti_user_channel)
        ? NotificationUserChannel.fromJSON(object.noti_user_channel)
        : undefined,
      join_channel_app_data: isSet(object.join_channel_app_data)
        ? JoinChannelAppData.fromJSON(object.join_channel_app_data)
        : undefined,
      canvas_event: isSet(object.canvas_event) ? ChannelCanvas.fromJSON(object.canvas_event) : undefined,
      unpin_message_event: isSet(object.unpin_message_event)
        ? UnpinMessageEvent.fromJSON(object.unpin_message_event)
        : undefined,
      category_event: isSet(object.category_event) ? CategoryEvent.fromJSON(object.category_event) : undefined,
      handle_participant_meet_state_event: isSet(object.handle_participant_meet_state_event)
        ? HandleParticipantMeetStateEvent.fromJSON(object.handle_participant_meet_state_event)
        : undefined,
      delete_account_event: isSet(object.delete_account_event)
        ? DeleteAccountEvent.fromJSON(object.delete_account_event)
        : undefined,
    };
  },

  toJSON(message: Envelope): unknown {
    const obj: any = {};
    if (message.cid !== "") {
      obj.cid = message.cid;
    }
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.clan_join !== undefined) {
      obj.clan_join = ClanJoin.toJSON(message.clan_join);
    }
    if (message.channel_join !== undefined) {
      obj.channel_join = ChannelJoin.toJSON(message.channel_join);
    }
    if (message.channel_leave !== undefined) {
      obj.channel_leave = ChannelLeave.toJSON(message.channel_leave);
    }
    if (message.channel_message !== undefined) {
      obj.channel_message = ChannelMessage.toJSON(message.channel_message);
    }
    if (message.channel_message_ack !== undefined) {
      obj.channel_message_ack = ChannelMessageAck.toJSON(message.channel_message_ack);
    }
    if (message.channel_message_send !== undefined) {
      obj.channel_message_send = ChannelMessageSend.toJSON(message.channel_message_send);
    }
    if (message.channel_message_update !== undefined) {
      obj.channel_message_update = ChannelMessageUpdate.toJSON(message.channel_message_update);
    }
    if (message.channel_message_remove !== undefined) {
      obj.channel_message_remove = ChannelMessageRemove.toJSON(message.channel_message_remove);
    }
    if (message.channel_presence_event !== undefined) {
      obj.channel_presence_event = ChannelPresenceEvent.toJSON(message.channel_presence_event);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.notifications !== undefined) {
      obj.notifications = Notifications.toJSON(message.notifications);
    }
    if (message.rpc !== undefined) {
      obj.rpc = Rpc.toJSON(message.rpc);
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.status_follow !== undefined) {
      obj.status_follow = StatusFollow.toJSON(message.status_follow);
    }
    if (message.status_presence_event !== undefined) {
      obj.status_presence_event = StatusPresenceEvent.toJSON(message.status_presence_event);
    }
    if (message.status_unfollow !== undefined) {
      obj.status_unfollow = StatusUnfollow.toJSON(message.status_unfollow);
    }
    if (message.status_update !== undefined) {
      obj.status_update = StatusUpdate.toJSON(message.status_update);
    }
    if (message.stream_data !== undefined) {
      obj.stream_data = StreamData.toJSON(message.stream_data);
    }
    if (message.stream_presence_event !== undefined) {
      obj.stream_presence_event = StreamPresenceEvent.toJSON(message.stream_presence_event);
    }
    if (message.ping !== undefined) {
      obj.ping = Ping.toJSON(message.ping);
    }
    if (message.pong !== undefined) {
      obj.pong = Pong.toJSON(message.pong);
    }
    if (message.message_typing_event !== undefined) {
      obj.message_typing_event = MessageTypingEvent.toJSON(message.message_typing_event);
    }
    if (message.last_seen_message_event !== undefined) {
      obj.last_seen_message_event = LastSeenMessageEvent.toJSON(message.last_seen_message_event);
    }
    if (message.message_reaction_event !== undefined) {
      obj.message_reaction_event = MessageReaction.toJSON(message.message_reaction_event);
    }
    if (message.voice_joined_event !== undefined) {
      obj.voice_joined_event = VoiceJoinedEvent.toJSON(message.voice_joined_event);
    }
    if (message.voice_leaved_event !== undefined) {
      obj.voice_leaved_event = VoiceLeavedEvent.toJSON(message.voice_leaved_event);
    }
    if (message.voice_started_event !== undefined) {
      obj.voice_started_event = VoiceStartedEvent.toJSON(message.voice_started_event);
    }
    if (message.voice_ended_event !== undefined) {
      obj.voice_ended_event = VoiceEndedEvent.toJSON(message.voice_ended_event);
    }
    if (message.channel_created_event !== undefined) {
      obj.channel_created_event = ChannelCreatedEvent.toJSON(message.channel_created_event);
    }
    if (message.channel_deleted_event !== undefined) {
      obj.channel_deleted_event = ChannelDeletedEvent.toJSON(message.channel_deleted_event);
    }
    if (message.channel_updated_event !== undefined) {
      obj.channel_updated_event = ChannelUpdatedEvent.toJSON(message.channel_updated_event);
    }
    if (message.last_pin_message_event !== undefined) {
      obj.last_pin_message_event = LastPinMessageEvent.toJSON(message.last_pin_message_event);
    }
    if (message.custom_status_event !== undefined) {
      obj.custom_status_event = CustomStatusEvent.toJSON(message.custom_status_event);
    }
    if (message.user_channel_added_event !== undefined) {
      obj.user_channel_added_event = UserChannelAdded.toJSON(message.user_channel_added_event);
    }
    if (message.user_channel_removed_event !== undefined) {
      obj.user_channel_removed_event = UserChannelRemoved.toJSON(message.user_channel_removed_event);
    }
    if (message.user_clan_removed_event !== undefined) {
      obj.user_clan_removed_event = UserClanRemoved.toJSON(message.user_clan_removed_event);
    }
    if (message.clan_updated_event !== undefined) {
      obj.clan_updated_event = ClanUpdatedEvent.toJSON(message.clan_updated_event);
    }
    if (message.clan_profile_updated_event !== undefined) {
      obj.clan_profile_updated_event = ClanProfileUpdatedEvent.toJSON(message.clan_profile_updated_event);
    }
    if (message.check_name_existed_event !== undefined) {
      obj.check_name_existed_event = CheckNameExistedEvent.toJSON(message.check_name_existed_event);
    }
    if (message.user_profile_updated_event !== undefined) {
      obj.user_profile_updated_event = UserProfileUpdatedEvent.toJSON(message.user_profile_updated_event);
    }
    if (message.add_clan_user_event !== undefined) {
      obj.add_clan_user_event = AddClanUserEvent.toJSON(message.add_clan_user_event);
    }
    if (message.clan_event_created !== undefined) {
      obj.clan_event_created = CreateEventRequest.toJSON(message.clan_event_created);
    }
    if (message.role_assign_event !== undefined) {
      obj.role_assign_event = RoleAssignedEvent.toJSON(message.role_assign_event);
    }
    if (message.clan_deleted_event !== undefined) {
      obj.clan_deleted_event = ClanDeletedEvent.toJSON(message.clan_deleted_event);
    }
    if (message.give_coffee_event !== undefined) {
      obj.give_coffee_event = GiveCoffeeEvent.toJSON(message.give_coffee_event);
    }
    if (message.sticker_create_event !== undefined) {
      obj.sticker_create_event = StickerCreateEvent.toJSON(message.sticker_create_event);
    }
    if (message.sticker_update_event !== undefined) {
      obj.sticker_update_event = StickerUpdateEvent.toJSON(message.sticker_update_event);
    }
    if (message.sticker_delete_event !== undefined) {
      obj.sticker_delete_event = StickerDeleteEvent.toJSON(message.sticker_delete_event);
    }
    if (message.role_event !== undefined) {
      obj.role_event = RoleEvent.toJSON(message.role_event);
    }
    if (message.event_emoji !== undefined) {
      obj.event_emoji = EventEmoji.toJSON(message.event_emoji);
    }
    if (message.streaming_joined_event !== undefined) {
      obj.streaming_joined_event = StreamingJoinedEvent.toJSON(message.streaming_joined_event);
    }
    if (message.streaming_leaved_event !== undefined) {
      obj.streaming_leaved_event = StreamingLeavedEvent.toJSON(message.streaming_leaved_event);
    }
    if (message.streaming_started_event !== undefined) {
      obj.streaming_started_event = StreamingStartedEvent.toJSON(message.streaming_started_event);
    }
    if (message.streaming_ended_event !== undefined) {
      obj.streaming_ended_event = StreamingEndedEvent.toJSON(message.streaming_ended_event);
    }
    if (message.permission_set_event !== undefined) {
      obj.permission_set_event = PermissionSetEvent.toJSON(message.permission_set_event);
    }
    if (message.permission_changed_event !== undefined) {
      obj.permission_changed_event = PermissionChangedEvent.toJSON(message.permission_changed_event);
    }
    if (message.token_sent_event !== undefined) {
      obj.token_sent_event = TokenSentEvent.toJSON(message.token_sent_event);
    }
    if (message.message_button_clicked !== undefined) {
      obj.message_button_clicked = MessageButtonClicked.toJSON(message.message_button_clicked);
    }
    if (message.unmute_event !== undefined) {
      obj.unmute_event = UnmuteEvent.toJSON(message.unmute_event);
    }
    if (message.webrtc_signaling_fwd !== undefined) {
      obj.webrtc_signaling_fwd = WebrtcSignalingFwd.toJSON(message.webrtc_signaling_fwd);
    }
    if (message.list_activity !== undefined) {
      obj.list_activity = ListActivity.toJSON(message.list_activity);
    }
    if (message.dropdown_box_selected !== undefined) {
      obj.dropdown_box_selected = DropdownBoxSelected.toJSON(message.dropdown_box_selected);
    }
    if (message.incoming_call_push !== undefined) {
      obj.incoming_call_push = IncomingCallPush.toJSON(message.incoming_call_push);
    }
    if (message.sd_topic_event !== undefined) {
      obj.sd_topic_event = SdTopicEvent.toJSON(message.sd_topic_event);
    }
    if (message.follow_event !== undefined) {
      obj.follow_event = FollowEvent.toJSON(message.follow_event);
    }
    if (message.channel_app_event !== undefined) {
      obj.channel_app_event = ChannelAppEvent.toJSON(message.channel_app_event);
    }
    if (message.user_status_event !== undefined) {
      obj.user_status_event = UserStatusEvent.toJSON(message.user_status_event);
    }
    if (message.remove_friend !== undefined) {
      obj.remove_friend = RemoveFriend.toJSON(message.remove_friend);
    }
    if (message.webhook_event !== undefined) {
      obj.webhook_event = Webhook.toJSON(message.webhook_event);
    }
    if (message.noti_user_channel !== undefined) {
      obj.noti_user_channel = NotificationUserChannel.toJSON(message.noti_user_channel);
    }
    if (message.join_channel_app_data !== undefined) {
      obj.join_channel_app_data = JoinChannelAppData.toJSON(message.join_channel_app_data);
    }
    if (message.canvas_event !== undefined) {
      obj.canvas_event = ChannelCanvas.toJSON(message.canvas_event);
    }
    if (message.unpin_message_event !== undefined) {
      obj.unpin_message_event = UnpinMessageEvent.toJSON(message.unpin_message_event);
    }
    if (message.category_event !== undefined) {
      obj.category_event = CategoryEvent.toJSON(message.category_event);
    }
    if (message.handle_participant_meet_state_event !== undefined) {
      obj.handle_participant_meet_state_event = HandleParticipantMeetStateEvent.toJSON(
        message.handle_participant_meet_state_event,
      );
    }
    if (message.delete_account_event !== undefined) {
      obj.delete_account_event = DeleteAccountEvent.toJSON(message.delete_account_event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Envelope>, I>>(base?: I): Envelope {
    return Envelope.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Envelope>, I>>(object: I): Envelope {
    const message = createBaseEnvelope();
    message.cid = object.cid ?? "";
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? Channel.fromPartial(object.channel)
      : undefined;
    message.clan_join = (object.clan_join !== undefined && object.clan_join !== null)
      ? ClanJoin.fromPartial(object.clan_join)
      : undefined;
    message.channel_join = (object.channel_join !== undefined && object.channel_join !== null)
      ? ChannelJoin.fromPartial(object.channel_join)
      : undefined;
    message.channel_leave = (object.channel_leave !== undefined && object.channel_leave !== null)
      ? ChannelLeave.fromPartial(object.channel_leave)
      : undefined;
    message.channel_message = (object.channel_message !== undefined && object.channel_message !== null)
      ? ChannelMessage.fromPartial(object.channel_message)
      : undefined;
    message.channel_message_ack = (object.channel_message_ack !== undefined && object.channel_message_ack !== null)
      ? ChannelMessageAck.fromPartial(object.channel_message_ack)
      : undefined;
    message.channel_message_send = (object.channel_message_send !== undefined && object.channel_message_send !== null)
      ? ChannelMessageSend.fromPartial(object.channel_message_send)
      : undefined;
    message.channel_message_update =
      (object.channel_message_update !== undefined && object.channel_message_update !== null)
        ? ChannelMessageUpdate.fromPartial(object.channel_message_update)
        : undefined;
    message.channel_message_remove =
      (object.channel_message_remove !== undefined && object.channel_message_remove !== null)
        ? ChannelMessageRemove.fromPartial(object.channel_message_remove)
        : undefined;
    message.channel_presence_event =
      (object.channel_presence_event !== undefined && object.channel_presence_event !== null)
        ? ChannelPresenceEvent.fromPartial(object.channel_presence_event)
        : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.notifications = (object.notifications !== undefined && object.notifications !== null)
      ? Notifications.fromPartial(object.notifications)
      : undefined;
    message.rpc = (object.rpc !== undefined && object.rpc !== null) ? Rpc.fromPartial(object.rpc) : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.status_follow = (object.status_follow !== undefined && object.status_follow !== null)
      ? StatusFollow.fromPartial(object.status_follow)
      : undefined;
    message.status_presence_event =
      (object.status_presence_event !== undefined && object.status_presence_event !== null)
        ? StatusPresenceEvent.fromPartial(object.status_presence_event)
        : undefined;
    message.status_unfollow = (object.status_unfollow !== undefined && object.status_unfollow !== null)
      ? StatusUnfollow.fromPartial(object.status_unfollow)
      : undefined;
    message.status_update = (object.status_update !== undefined && object.status_update !== null)
      ? StatusUpdate.fromPartial(object.status_update)
      : undefined;
    message.stream_data = (object.stream_data !== undefined && object.stream_data !== null)
      ? StreamData.fromPartial(object.stream_data)
      : undefined;
    message.stream_presence_event =
      (object.stream_presence_event !== undefined && object.stream_presence_event !== null)
        ? StreamPresenceEvent.fromPartial(object.stream_presence_event)
        : undefined;
    message.ping = (object.ping !== undefined && object.ping !== null) ? Ping.fromPartial(object.ping) : undefined;
    message.pong = (object.pong !== undefined && object.pong !== null) ? Pong.fromPartial(object.pong) : undefined;
    message.message_typing_event = (object.message_typing_event !== undefined && object.message_typing_event !== null)
      ? MessageTypingEvent.fromPartial(object.message_typing_event)
      : undefined;
    message.last_seen_message_event =
      (object.last_seen_message_event !== undefined && object.last_seen_message_event !== null)
        ? LastSeenMessageEvent.fromPartial(object.last_seen_message_event)
        : undefined;
    message.message_reaction_event =
      (object.message_reaction_event !== undefined && object.message_reaction_event !== null)
        ? MessageReaction.fromPartial(object.message_reaction_event)
        : undefined;
    message.voice_joined_event = (object.voice_joined_event !== undefined && object.voice_joined_event !== null)
      ? VoiceJoinedEvent.fromPartial(object.voice_joined_event)
      : undefined;
    message.voice_leaved_event = (object.voice_leaved_event !== undefined && object.voice_leaved_event !== null)
      ? VoiceLeavedEvent.fromPartial(object.voice_leaved_event)
      : undefined;
    message.voice_started_event = (object.voice_started_event !== undefined && object.voice_started_event !== null)
      ? VoiceStartedEvent.fromPartial(object.voice_started_event)
      : undefined;
    message.voice_ended_event = (object.voice_ended_event !== undefined && object.voice_ended_event !== null)
      ? VoiceEndedEvent.fromPartial(object.voice_ended_event)
      : undefined;
    message.channel_created_event =
      (object.channel_created_event !== undefined && object.channel_created_event !== null)
        ? ChannelCreatedEvent.fromPartial(object.channel_created_event)
        : undefined;
    message.channel_deleted_event =
      (object.channel_deleted_event !== undefined && object.channel_deleted_event !== null)
        ? ChannelDeletedEvent.fromPartial(object.channel_deleted_event)
        : undefined;
    message.channel_updated_event =
      (object.channel_updated_event !== undefined && object.channel_updated_event !== null)
        ? ChannelUpdatedEvent.fromPartial(object.channel_updated_event)
        : undefined;
    message.last_pin_message_event =
      (object.last_pin_message_event !== undefined && object.last_pin_message_event !== null)
        ? LastPinMessageEvent.fromPartial(object.last_pin_message_event)
        : undefined;
    message.custom_status_event = (object.custom_status_event !== undefined && object.custom_status_event !== null)
      ? CustomStatusEvent.fromPartial(object.custom_status_event)
      : undefined;
    message.user_channel_added_event =
      (object.user_channel_added_event !== undefined && object.user_channel_added_event !== null)
        ? UserChannelAdded.fromPartial(object.user_channel_added_event)
        : undefined;
    message.user_channel_removed_event =
      (object.user_channel_removed_event !== undefined && object.user_channel_removed_event !== null)
        ? UserChannelRemoved.fromPartial(object.user_channel_removed_event)
        : undefined;
    message.user_clan_removed_event =
      (object.user_clan_removed_event !== undefined && object.user_clan_removed_event !== null)
        ? UserClanRemoved.fromPartial(object.user_clan_removed_event)
        : undefined;
    message.clan_updated_event = (object.clan_updated_event !== undefined && object.clan_updated_event !== null)
      ? ClanUpdatedEvent.fromPartial(object.clan_updated_event)
      : undefined;
    message.clan_profile_updated_event =
      (object.clan_profile_updated_event !== undefined && object.clan_profile_updated_event !== null)
        ? ClanProfileUpdatedEvent.fromPartial(object.clan_profile_updated_event)
        : undefined;
    message.check_name_existed_event =
      (object.check_name_existed_event !== undefined && object.check_name_existed_event !== null)
        ? CheckNameExistedEvent.fromPartial(object.check_name_existed_event)
        : undefined;
    message.user_profile_updated_event =
      (object.user_profile_updated_event !== undefined && object.user_profile_updated_event !== null)
        ? UserProfileUpdatedEvent.fromPartial(object.user_profile_updated_event)
        : undefined;
    message.add_clan_user_event = (object.add_clan_user_event !== undefined && object.add_clan_user_event !== null)
      ? AddClanUserEvent.fromPartial(object.add_clan_user_event)
      : undefined;
    message.clan_event_created = (object.clan_event_created !== undefined && object.clan_event_created !== null)
      ? CreateEventRequest.fromPartial(object.clan_event_created)
      : undefined;
    message.role_assign_event = (object.role_assign_event !== undefined && object.role_assign_event !== null)
      ? RoleAssignedEvent.fromPartial(object.role_assign_event)
      : undefined;
    message.clan_deleted_event = (object.clan_deleted_event !== undefined && object.clan_deleted_event !== null)
      ? ClanDeletedEvent.fromPartial(object.clan_deleted_event)
      : undefined;
    message.give_coffee_event = (object.give_coffee_event !== undefined && object.give_coffee_event !== null)
      ? GiveCoffeeEvent.fromPartial(object.give_coffee_event)
      : undefined;
    message.sticker_create_event = (object.sticker_create_event !== undefined && object.sticker_create_event !== null)
      ? StickerCreateEvent.fromPartial(object.sticker_create_event)
      : undefined;
    message.sticker_update_event = (object.sticker_update_event !== undefined && object.sticker_update_event !== null)
      ? StickerUpdateEvent.fromPartial(object.sticker_update_event)
      : undefined;
    message.sticker_delete_event = (object.sticker_delete_event !== undefined && object.sticker_delete_event !== null)
      ? StickerDeleteEvent.fromPartial(object.sticker_delete_event)
      : undefined;
    message.role_event = (object.role_event !== undefined && object.role_event !== null)
      ? RoleEvent.fromPartial(object.role_event)
      : undefined;
    message.event_emoji = (object.event_emoji !== undefined && object.event_emoji !== null)
      ? EventEmoji.fromPartial(object.event_emoji)
      : undefined;
    message.streaming_joined_event =
      (object.streaming_joined_event !== undefined && object.streaming_joined_event !== null)
        ? StreamingJoinedEvent.fromPartial(object.streaming_joined_event)
        : undefined;
    message.streaming_leaved_event =
      (object.streaming_leaved_event !== undefined && object.streaming_leaved_event !== null)
        ? StreamingLeavedEvent.fromPartial(object.streaming_leaved_event)
        : undefined;
    message.streaming_started_event =
      (object.streaming_started_event !== undefined && object.streaming_started_event !== null)
        ? StreamingStartedEvent.fromPartial(object.streaming_started_event)
        : undefined;
    message.streaming_ended_event =
      (object.streaming_ended_event !== undefined && object.streaming_ended_event !== null)
        ? StreamingEndedEvent.fromPartial(object.streaming_ended_event)
        : undefined;
    message.permission_set_event = (object.permission_set_event !== undefined && object.permission_set_event !== null)
      ? PermissionSetEvent.fromPartial(object.permission_set_event)
      : undefined;
    message.permission_changed_event =
      (object.permission_changed_event !== undefined && object.permission_changed_event !== null)
        ? PermissionChangedEvent.fromPartial(object.permission_changed_event)
        : undefined;
    message.token_sent_event = (object.token_sent_event !== undefined && object.token_sent_event !== null)
      ? TokenSentEvent.fromPartial(object.token_sent_event)
      : undefined;
    message.message_button_clicked =
      (object.message_button_clicked !== undefined && object.message_button_clicked !== null)
        ? MessageButtonClicked.fromPartial(object.message_button_clicked)
        : undefined;
    message.unmute_event = (object.unmute_event !== undefined && object.unmute_event !== null)
      ? UnmuteEvent.fromPartial(object.unmute_event)
      : undefined;
    message.webrtc_signaling_fwd = (object.webrtc_signaling_fwd !== undefined && object.webrtc_signaling_fwd !== null)
      ? WebrtcSignalingFwd.fromPartial(object.webrtc_signaling_fwd)
      : undefined;
    message.list_activity = (object.list_activity !== undefined && object.list_activity !== null)
      ? ListActivity.fromPartial(object.list_activity)
      : undefined;
    message.dropdown_box_selected =
      (object.dropdown_box_selected !== undefined && object.dropdown_box_selected !== null)
        ? DropdownBoxSelected.fromPartial(object.dropdown_box_selected)
        : undefined;
    message.incoming_call_push = (object.incoming_call_push !== undefined && object.incoming_call_push !== null)
      ? IncomingCallPush.fromPartial(object.incoming_call_push)
      : undefined;
    message.sd_topic_event = (object.sd_topic_event !== undefined && object.sd_topic_event !== null)
      ? SdTopicEvent.fromPartial(object.sd_topic_event)
      : undefined;
    message.follow_event = (object.follow_event !== undefined && object.follow_event !== null)
      ? FollowEvent.fromPartial(object.follow_event)
      : undefined;
    message.channel_app_event = (object.channel_app_event !== undefined && object.channel_app_event !== null)
      ? ChannelAppEvent.fromPartial(object.channel_app_event)
      : undefined;
    message.user_status_event = (object.user_status_event !== undefined && object.user_status_event !== null)
      ? UserStatusEvent.fromPartial(object.user_status_event)
      : undefined;
    message.remove_friend = (object.remove_friend !== undefined && object.remove_friend !== null)
      ? RemoveFriend.fromPartial(object.remove_friend)
      : undefined;
    message.webhook_event = (object.webhook_event !== undefined && object.webhook_event !== null)
      ? Webhook.fromPartial(object.webhook_event)
      : undefined;
    message.noti_user_channel = (object.noti_user_channel !== undefined && object.noti_user_channel !== null)
      ? NotificationUserChannel.fromPartial(object.noti_user_channel)
      : undefined;
    message.join_channel_app_data =
      (object.join_channel_app_data !== undefined && object.join_channel_app_data !== null)
        ? JoinChannelAppData.fromPartial(object.join_channel_app_data)
        : undefined;
    message.canvas_event = (object.canvas_event !== undefined && object.canvas_event !== null)
      ? ChannelCanvas.fromPartial(object.canvas_event)
      : undefined;
    message.unpin_message_event = (object.unpin_message_event !== undefined && object.unpin_message_event !== null)
      ? UnpinMessageEvent.fromPartial(object.unpin_message_event)
      : undefined;
    message.category_event = (object.category_event !== undefined && object.category_event !== null)
      ? CategoryEvent.fromPartial(object.category_event)
      : undefined;
    message.handle_participant_meet_state_event =
      (object.handle_participant_meet_state_event !== undefined && object.handle_participant_meet_state_event !== null)
        ? HandleParticipantMeetStateEvent.fromPartial(object.handle_participant_meet_state_event)
        : undefined;
    message.delete_account_event = (object.delete_account_event !== undefined && object.delete_account_event !== null)
      ? DeleteAccountEvent.fromPartial(object.delete_account_event)
      : undefined;
    return message;
  },
};

function createBaseFollowEvent(): FollowEvent {
  return {};
}

export const FollowEvent = {
  encode(_: FollowEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FollowEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FollowEvent {
    return {};
  },

  toJSON(_: FollowEvent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowEvent>, I>>(base?: I): FollowEvent {
    return FollowEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowEvent>, I>>(_: I): FollowEvent {
    const message = createBaseFollowEvent();
    return message;
  },
};

function createBaseChannelCanvas(): ChannelCanvas {
  return {
    id: "",
    title: "",
    content: "",
    creator_id: "",
    editor_id: "",
    is_default: false,
    channel_id: "",
    status: 0,
  };
}

export const ChannelCanvas = {
  encode(message: ChannelCanvas, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.creator_id !== "") {
      writer.uint32(34).string(message.creator_id);
    }
    if (message.editor_id !== "") {
      writer.uint32(42).string(message.editor_id);
    }
    if (message.is_default !== false) {
      writer.uint32(48).bool(message.is_default);
    }
    if (message.channel_id !== "") {
      writer.uint32(58).string(message.channel_id);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelCanvas {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelCanvas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.editor_id = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.is_default = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelCanvas {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      editor_id: isSet(object.editor_id) ? globalThis.String(object.editor_id) : "",
      is_default: isSet(object.is_default) ? globalThis.Boolean(object.is_default) : false,
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: ChannelCanvas): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.editor_id !== "") {
      obj.editor_id = message.editor_id;
    }
    if (message.is_default !== false) {
      obj.is_default = message.is_default;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelCanvas>, I>>(base?: I): ChannelCanvas {
    return ChannelCanvas.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelCanvas>, I>>(object: I): ChannelCanvas {
    const message = createBaseChannelCanvas();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.creator_id = object.creator_id ?? "";
    message.editor_id = object.editor_id ?? "";
    message.is_default = object.is_default ?? false;
    message.channel_id = object.channel_id ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseIncomingCallPush(): IncomingCallPush {
  return { receiver_id: "", json_data: "", channel_id: "", caller_id: "" };
}

export const IncomingCallPush = {
  encode(message: IncomingCallPush, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.receiver_id !== "") {
      writer.uint32(10).string(message.receiver_id);
    }
    if (message.json_data !== "") {
      writer.uint32(26).string(message.json_data);
    }
    if (message.channel_id !== "") {
      writer.uint32(34).string(message.channel_id);
    }
    if (message.caller_id !== "") {
      writer.uint32(42).string(message.caller_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IncomingCallPush {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingCallPush();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.receiver_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.json_data = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.caller_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingCallPush {
    return {
      receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
      json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      caller_id: isSet(object.caller_id) ? globalThis.String(object.caller_id) : "",
    };
  },

  toJSON(message: IncomingCallPush): unknown {
    const obj: any = {};
    if (message.receiver_id !== "") {
      obj.receiver_id = message.receiver_id;
    }
    if (message.json_data !== "") {
      obj.json_data = message.json_data;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.caller_id !== "") {
      obj.caller_id = message.caller_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingCallPush>, I>>(base?: I): IncomingCallPush {
    return IncomingCallPush.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingCallPush>, I>>(object: I): IncomingCallPush {
    const message = createBaseIncomingCallPush();
    message.receiver_id = object.receiver_id ?? "";
    message.json_data = object.json_data ?? "";
    message.channel_id = object.channel_id ?? "";
    message.caller_id = object.caller_id ?? "";
    return message;
  },
};

function createBaseWebrtcSignalingFwd(): WebrtcSignalingFwd {
  return { receiver_id: "", data_type: 0, json_data: "", channel_id: "", caller_id: "" };
}

export const WebrtcSignalingFwd = {
  encode(message: WebrtcSignalingFwd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.receiver_id !== "") {
      writer.uint32(10).string(message.receiver_id);
    }
    if (message.data_type !== 0) {
      writer.uint32(16).int32(message.data_type);
    }
    if (message.json_data !== "") {
      writer.uint32(26).string(message.json_data);
    }
    if (message.channel_id !== "") {
      writer.uint32(34).string(message.channel_id);
    }
    if (message.caller_id !== "") {
      writer.uint32(42).string(message.caller_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WebrtcSignalingFwd {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebrtcSignalingFwd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.receiver_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.data_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.json_data = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.caller_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebrtcSignalingFwd {
    return {
      receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
      data_type: isSet(object.data_type) ? globalThis.Number(object.data_type) : 0,
      json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      caller_id: isSet(object.caller_id) ? globalThis.String(object.caller_id) : "",
    };
  },

  toJSON(message: WebrtcSignalingFwd): unknown {
    const obj: any = {};
    if (message.receiver_id !== "") {
      obj.receiver_id = message.receiver_id;
    }
    if (message.data_type !== 0) {
      obj.data_type = Math.round(message.data_type);
    }
    if (message.json_data !== "") {
      obj.json_data = message.json_data;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.caller_id !== "") {
      obj.caller_id = message.caller_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebrtcSignalingFwd>, I>>(base?: I): WebrtcSignalingFwd {
    return WebrtcSignalingFwd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebrtcSignalingFwd>, I>>(object: I): WebrtcSignalingFwd {
    const message = createBaseWebrtcSignalingFwd();
    message.receiver_id = object.receiver_id ?? "";
    message.data_type = object.data_type ?? 0;
    message.json_data = object.json_data ?? "";
    message.channel_id = object.channel_id ?? "";
    message.caller_id = object.caller_id ?? "";
    return message;
  },
};

function createBaseSFUSignalingFwd(): SFUSignalingFwd {
  return { clan_id: "", channel_id: "", data_type: 0, json_data: "", user_id: "" };
}

export const SFUSignalingFwd = {
  encode(message: SFUSignalingFwd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.data_type !== 0) {
      writer.uint32(24).int32(message.data_type);
    }
    if (message.json_data !== "") {
      writer.uint32(34).string(message.json_data);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SFUSignalingFwd {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSFUSignalingFwd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.data_type = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.json_data = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SFUSignalingFwd {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      data_type: isSet(object.data_type) ? globalThis.Number(object.data_type) : 0,
      json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
    };
  },

  toJSON(message: SFUSignalingFwd): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.data_type !== 0) {
      obj.data_type = Math.round(message.data_type);
    }
    if (message.json_data !== "") {
      obj.json_data = message.json_data;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SFUSignalingFwd>, I>>(base?: I): SFUSignalingFwd {
    return SFUSignalingFwd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SFUSignalingFwd>, I>>(object: I): SFUSignalingFwd {
    const message = createBaseSFUSignalingFwd();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.data_type = object.data_type ?? 0;
    message.json_data = object.json_data ?? "";
    message.user_id = object.user_id ?? "";
    return message;
  },
};

function createBaseAddClanUserEvent(): AddClanUserEvent {
  return { clan_id: "", user: undefined };
}

export const AddClanUserEvent = {
  encode(message: AddClanUserEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.user !== undefined) {
      UserProfileRedis.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddClanUserEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddClanUserEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = UserProfileRedis.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddClanUserEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      user: isSet(object.user) ? UserProfileRedis.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: AddClanUserEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.user !== undefined) {
      obj.user = UserProfileRedis.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddClanUserEvent>, I>>(base?: I): AddClanUserEvent {
    return AddClanUserEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddClanUserEvent>, I>>(object: I): AddClanUserEvent {
    const message = createBaseAddClanUserEvent();
    message.clan_id = object.clan_id ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? UserProfileRedis.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseRoleAssignedEvent(): RoleAssignedEvent {
  return { ClanId: "", role_id: "", user_ids_assigned: [], user_ids_removed: [] };
}

export const RoleAssignedEvent = {
  encode(message: RoleAssignedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ClanId !== "") {
      writer.uint32(10).string(message.ClanId);
    }
    if (message.role_id !== "") {
      writer.uint32(18).string(message.role_id);
    }
    for (const v of message.user_ids_assigned) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.user_ids_removed) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleAssignedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleAssignedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ClanId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.role_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_ids_assigned.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.user_ids_removed.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleAssignedEvent {
    return {
      ClanId: isSet(object.ClanId) ? globalThis.String(object.ClanId) : "",
      role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
      user_ids_assigned: globalThis.Array.isArray(object?.user_ids_assigned)
        ? object.user_ids_assigned.map((e: any) => globalThis.String(e))
        : [],
      user_ids_removed: globalThis.Array.isArray(object?.user_ids_removed)
        ? object.user_ids_removed.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RoleAssignedEvent): unknown {
    const obj: any = {};
    if (message.ClanId !== "") {
      obj.ClanId = message.ClanId;
    }
    if (message.role_id !== "") {
      obj.role_id = message.role_id;
    }
    if (message.user_ids_assigned?.length) {
      obj.user_ids_assigned = message.user_ids_assigned;
    }
    if (message.user_ids_removed?.length) {
      obj.user_ids_removed = message.user_ids_removed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleAssignedEvent>, I>>(base?: I): RoleAssignedEvent {
    return RoleAssignedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleAssignedEvent>, I>>(object: I): RoleAssignedEvent {
    const message = createBaseRoleAssignedEvent();
    message.ClanId = object.ClanId ?? "";
    message.role_id = object.role_id ?? "";
    message.user_ids_assigned = object.user_ids_assigned?.map((e) => e) || [];
    message.user_ids_removed = object.user_ids_removed?.map((e) => e) || [];
    return message;
  },
};

function createBasePermissionRoleChannel(): PermissionRoleChannel {
  return { permission_id: "", active: false };
}

export const PermissionRoleChannel = {
  encode(message: PermissionRoleChannel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permission_id !== "") {
      writer.uint32(10).string(message.permission_id);
    }
    if (message.active !== false) {
      writer.uint32(16).bool(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionRoleChannel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionRoleChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.active = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionRoleChannel {
    return {
      permission_id: isSet(object.permission_id) ? globalThis.String(object.permission_id) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: PermissionRoleChannel): unknown {
    const obj: any = {};
    if (message.permission_id !== "") {
      obj.permission_id = message.permission_id;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionRoleChannel>, I>>(base?: I): PermissionRoleChannel {
    return PermissionRoleChannel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionRoleChannel>, I>>(object: I): PermissionRoleChannel {
    const message = createBasePermissionRoleChannel();
    message.permission_id = object.permission_id ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseHashtagDm(): HashtagDm {
  return {
    channel_id: "",
    channel_label: "",
    clan_id: "",
    clan_name: "",
    meeting_code: "",
    type: 0,
    channel_private: 0,
    parent_id: "",
  };
}

export const HashtagDm = {
  encode(message: HashtagDm, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_id !== "") {
      writer.uint32(10).string(message.channel_id);
    }
    if (message.channel_label !== "") {
      writer.uint32(18).string(message.channel_label);
    }
    if (message.clan_id !== "") {
      writer.uint32(26).string(message.clan_id);
    }
    if (message.clan_name !== "") {
      writer.uint32(34).string(message.clan_name);
    }
    if (message.meeting_code !== "") {
      writer.uint32(42).string(message.meeting_code);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.channel_private !== 0) {
      writer.uint32(56).int32(message.channel_private);
    }
    if (message.parent_id !== "") {
      writer.uint32(66).string(message.parent_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HashtagDm {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashtagDm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_label = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.meeting_code = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.channel_private = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.parent_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HashtagDm {
    return {
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
      meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
      parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
    };
  },

  toJSON(message: HashtagDm): unknown {
    const obj: any = {};
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.channel_label !== "") {
      obj.channel_label = message.channel_label;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    if (message.meeting_code !== "") {
      obj.meeting_code = message.meeting_code;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.channel_private !== 0) {
      obj.channel_private = Math.round(message.channel_private);
    }
    if (message.parent_id !== "") {
      obj.parent_id = message.parent_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HashtagDm>, I>>(base?: I): HashtagDm {
    return HashtagDm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HashtagDm>, I>>(object: I): HashtagDm {
    const message = createBaseHashtagDm();
    message.channel_id = object.channel_id ?? "";
    message.channel_label = object.channel_label ?? "";
    message.clan_id = object.clan_id ?? "";
    message.clan_name = object.clan_name ?? "";
    message.meeting_code = object.meeting_code ?? "";
    message.type = object.type ?? 0;
    message.channel_private = object.channel_private ?? 0;
    message.parent_id = object.parent_id ?? "";
    return message;
  },
};

function createBaseChannelDescription(): ChannelDescription {
  return {
    clan_id: "",
    channel_id: "",
    type: undefined,
    channel_label: "",
    channel_private: 0,
    meeting_code: "",
    clan_name: "",
    parent_id: "",
    last_sent_message: undefined,
  };
}

export const ChannelDescription = {
  encode(message: ChannelDescription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.type !== undefined) {
      Int32Value.encode({ value: message.type! }, writer.uint32(26).fork()).ldelim();
    }
    if (message.channel_label !== "") {
      writer.uint32(34).string(message.channel_label);
    }
    if (message.channel_private !== 0) {
      writer.uint32(40).int32(message.channel_private);
    }
    if (message.meeting_code !== "") {
      writer.uint32(50).string(message.meeting_code);
    }
    if (message.clan_name !== "") {
      writer.uint32(58).string(message.clan_name);
    }
    if (message.parent_id !== "") {
      writer.uint32(66).string(message.parent_id);
    }
    if (message.last_sent_message !== undefined) {
      ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelDescription {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_label = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.channel_private = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.meeting_code = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.clan_name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.parent_id = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.last_sent_message = ChannelMessageHeader.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelDescription {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      type: isSet(object.type) ? Number(object.type) : undefined,
      channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
      channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
      meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
      parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
      last_sent_message: isSet(object.last_sent_message)
        ? ChannelMessageHeader.fromJSON(object.last_sent_message)
        : undefined,
    };
  },

  toJSON(message: ChannelDescription): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.channel_label !== "") {
      obj.channel_label = message.channel_label;
    }
    if (message.channel_private !== 0) {
      obj.channel_private = Math.round(message.channel_private);
    }
    if (message.meeting_code !== "") {
      obj.meeting_code = message.meeting_code;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    if (message.parent_id !== "") {
      obj.parent_id = message.parent_id;
    }
    if (message.last_sent_message !== undefined) {
      obj.last_sent_message = ChannelMessageHeader.toJSON(message.last_sent_message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelDescription>, I>>(base?: I): ChannelDescription {
    return ChannelDescription.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelDescription>, I>>(object: I): ChannelDescription {
    const message = createBaseChannelDescription();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.type = object.type ?? undefined;
    message.channel_label = object.channel_label ?? "";
    message.channel_private = object.channel_private ?? 0;
    message.meeting_code = object.meeting_code ?? "";
    message.clan_name = object.clan_name ?? "";
    message.parent_id = object.parent_id ?? "";
    message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
      ? ChannelMessageHeader.fromPartial(object.last_sent_message)
      : undefined;
    return message;
  },
};

function createBaseClanEmoji(): ClanEmoji {
  return { id: "", src: "", shortname: "", category: "", creator_id: "", clan_id: "", logo: "", clan_name: "" };
}

export const ClanEmoji = {
  encode(message: ClanEmoji, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.src !== "") {
      writer.uint32(18).string(message.src);
    }
    if (message.shortname !== "") {
      writer.uint32(26).string(message.shortname);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (message.creator_id !== "") {
      writer.uint32(42).string(message.creator_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(50).string(message.clan_id);
    }
    if (message.logo !== "") {
      writer.uint32(58).string(message.logo);
    }
    if (message.clan_name !== "") {
      writer.uint32(66).string(message.clan_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClanEmoji {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClanEmoji();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.src = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortname = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.logo = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.clan_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClanEmoji {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      src: isSet(object.src) ? globalThis.String(object.src) : "",
      shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
    };
  },

  toJSON(message: ClanEmoji): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.src !== "") {
      obj.src = message.src;
    }
    if (message.shortname !== "") {
      obj.shortname = message.shortname;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClanEmoji>, I>>(base?: I): ClanEmoji {
    return ClanEmoji.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClanEmoji>, I>>(object: I): ClanEmoji {
    const message = createBaseClanEmoji();
    message.id = object.id ?? "";
    message.src = object.src ?? "";
    message.shortname = object.shortname ?? "";
    message.category = object.category ?? "";
    message.creator_id = object.creator_id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.logo = object.logo ?? "";
    message.clan_name = object.clan_name ?? "";
    return message;
  },
};

function createBaseChannel(): Channel {
  return { id: "", presences: [], self: undefined, chanel_label: "", clan_logo: "", category_name: "" };
}

export const Channel = {
  encode(message: Channel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.presences) {
      UserPresence.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.self !== undefined) {
      UserPresence.encode(message.self, writer.uint32(26).fork()).ldelim();
    }
    if (message.chanel_label !== "") {
      writer.uint32(34).string(message.chanel_label);
    }
    if (message.clan_logo !== "") {
      writer.uint32(42).string(message.clan_logo);
    }
    if (message.category_name !== "") {
      writer.uint32(50).string(message.category_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Channel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.presences.push(UserPresence.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.self = UserPresence.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.chanel_label = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clan_logo = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.category_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      presences: globalThis.Array.isArray(object?.presences)
        ? object.presences.map((e: any) => UserPresence.fromJSON(e))
        : [],
      self: isSet(object.self) ? UserPresence.fromJSON(object.self) : undefined,
      chanel_label: isSet(object.chanel_label) ? globalThis.String(object.chanel_label) : "",
      clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
      category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
    };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.presences?.length) {
      obj.presences = message.presences.map((e) => UserPresence.toJSON(e));
    }
    if (message.self !== undefined) {
      obj.self = UserPresence.toJSON(message.self);
    }
    if (message.chanel_label !== "") {
      obj.chanel_label = message.chanel_label;
    }
    if (message.clan_logo !== "") {
      obj.clan_logo = message.clan_logo;
    }
    if (message.category_name !== "") {
      obj.category_name = message.category_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channel>, I>>(base?: I): Channel {
    return Channel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channel>, I>>(object: I): Channel {
    const message = createBaseChannel();
    message.id = object.id ?? "";
    message.presences = object.presences?.map((e) => UserPresence.fromPartial(e)) || [];
    message.self = (object.self !== undefined && object.self !== null)
      ? UserPresence.fromPartial(object.self)
      : undefined;
    message.chanel_label = object.chanel_label ?? "";
    message.clan_logo = object.clan_logo ?? "";
    message.category_name = object.category_name ?? "";
    return message;
  },
};

function createBaseClanJoin(): ClanJoin {
  return { clan_id: "" };
}

export const ClanJoin = {
  encode(message: ClanJoin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClanJoin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClanJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClanJoin {
    return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
  },

  toJSON(message: ClanJoin): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClanJoin>, I>>(base?: I): ClanJoin {
    return ClanJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClanJoin>, I>>(object: I): ClanJoin {
    const message = createBaseClanJoin();
    message.clan_id = object.clan_id ?? "";
    return message;
  },
};

function createBaseChannelJoin(): ChannelJoin {
  return { clan_id: "", channel_id: "", channel_type: 0, is_public: false };
}

export const ChannelJoin = {
  encode(message: ChannelJoin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.channel_type !== 0) {
      writer.uint32(24).int32(message.channel_type);
    }
    if (message.is_public !== false) {
      writer.uint32(32).bool(message.is_public);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelJoin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelJoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel_type = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.is_public = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelJoin {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
    };
  },

  toJSON(message: ChannelJoin): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.channel_type !== 0) {
      obj.channel_type = Math.round(message.channel_type);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelJoin>, I>>(base?: I): ChannelJoin {
    return ChannelJoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelJoin>, I>>(object: I): ChannelJoin {
    const message = createBaseChannelJoin();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.channel_type = object.channel_type ?? 0;
    message.is_public = object.is_public ?? false;
    return message;
  },
};

function createBaseChannelLeave(): ChannelLeave {
  return { clan_id: "", channel_id: "", channel_type: 0, is_public: false };
}

export const ChannelLeave = {
  encode(message: ChannelLeave, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.channel_type !== 0) {
      writer.uint32(24).int32(message.channel_type);
    }
    if (message.is_public !== false) {
      writer.uint32(32).bool(message.is_public);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelLeave {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelLeave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel_type = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.is_public = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelLeave {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
    };
  },

  toJSON(message: ChannelLeave): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.channel_type !== 0) {
      obj.channel_type = Math.round(message.channel_type);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelLeave>, I>>(base?: I): ChannelLeave {
    return ChannelLeave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelLeave>, I>>(object: I): ChannelLeave {
    const message = createBaseChannelLeave();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.channel_type = object.channel_type ?? 0;
    message.is_public = object.is_public ?? false;
    return message;
  },
};

function createBaseChannelMessageAck(): ChannelMessageAck {
  return {
    channel_id: "",
    message_id: "",
    code: undefined,
    username: "",
    create_time: undefined,
    update_time: undefined,
    persistent: undefined,
    clan_logo: "",
    category_name: "",
  };
}

export const ChannelMessageAck = {
  encode(message: ChannelMessageAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_id !== "") {
      writer.uint32(10).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(18).string(message.message_id);
    }
    if (message.code !== undefined) {
      Int32Value.encode({ value: message.code! }, writer.uint32(26).fork()).ldelim();
    }
    if (message.username !== "") {
      writer.uint32(34).string(message.username);
    }
    if (message.create_time !== undefined) {
      Timestamp.encode(toTimestamp(message.create_time), writer.uint32(42).fork()).ldelim();
    }
    if (message.update_time !== undefined) {
      Timestamp.encode(toTimestamp(message.update_time), writer.uint32(50).fork()).ldelim();
    }
    if (message.persistent !== undefined) {
      BoolValue.encode({ value: message.persistent! }, writer.uint32(58).fork()).ldelim();
    }
    if (message.clan_logo !== "") {
      writer.uint32(66).string(message.clan_logo);
    }
    if (message.category_name !== "") {
      writer.uint32(74).string(message.category_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessageAck {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelMessageAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.username = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.create_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.update_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.persistent = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.clan_logo = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.category_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelMessageAck {
    return {
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      code: isSet(object.code) ? Number(object.code) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
      update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
      persistent: isSet(object.persistent) ? Boolean(object.persistent) : undefined,
      clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
      category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
    };
  },

  toJSON(message: ChannelMessageAck): unknown {
    const obj: any = {};
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.create_time !== undefined) {
      obj.create_time = message.create_time.toISOString();
    }
    if (message.update_time !== undefined) {
      obj.update_time = message.update_time.toISOString();
    }
    if (message.persistent !== undefined) {
      obj.persistent = message.persistent;
    }
    if (message.clan_logo !== "") {
      obj.clan_logo = message.clan_logo;
    }
    if (message.category_name !== "") {
      obj.category_name = message.category_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelMessageAck>, I>>(base?: I): ChannelMessageAck {
    return ChannelMessageAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelMessageAck>, I>>(object: I): ChannelMessageAck {
    const message = createBaseChannelMessageAck();
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.code = object.code ?? undefined;
    message.username = object.username ?? "";
    message.create_time = object.create_time ?? undefined;
    message.update_time = object.update_time ?? undefined;
    message.persistent = object.persistent ?? undefined;
    message.clan_logo = object.clan_logo ?? "";
    message.category_name = object.category_name ?? "";
    return message;
  },
};

function createBaseChannelMessageSend(): ChannelMessageSend {
  return {
    clan_id: "",
    channel_id: "",
    content: "",
    mentions: [],
    attachments: [],
    references: [],
    mode: 0,
    anonymous_message: false,
    mention_everyone: false,
    avatar: "",
    is_public: false,
    code: 0,
    topic_id: "",
  };
}

export const ChannelMessageSend = {
  encode(message: ChannelMessageSend, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    for (const v of message.mentions) {
      MessageMention.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.attachments) {
      MessageAttachment.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.references) {
      MessageRef.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    if (message.mode !== 0) {
      writer.uint32(56).int32(message.mode);
    }
    if (message.anonymous_message !== false) {
      writer.uint32(64).bool(message.anonymous_message);
    }
    if (message.mention_everyone !== false) {
      writer.uint32(72).bool(message.mention_everyone);
    }
    if (message.avatar !== "") {
      writer.uint32(82).string(message.avatar);
    }
    if (message.is_public !== false) {
      writer.uint32(88).bool(message.is_public);
    }
    if (message.code !== 0) {
      writer.uint32(96).int32(message.code);
    }
    if (message.topic_id !== "") {
      writer.uint32(106).string(message.topic_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessageSend {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelMessageSend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mentions.push(MessageMention.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.attachments.push(MessageAttachment.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.references.push(MessageRef.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.anonymous_message = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.mention_everyone = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.is_public = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.topic_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelMessageSend {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      mentions: globalThis.Array.isArray(object?.mentions)
        ? object.mentions.map((e: any) => MessageMention.fromJSON(e))
        : [],
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => MessageAttachment.fromJSON(e))
        : [],
      references: globalThis.Array.isArray(object?.references)
        ? object.references.map((e: any) => MessageRef.fromJSON(e))
        : [],
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      anonymous_message: isSet(object.anonymous_message) ? globalThis.Boolean(object.anonymous_message) : false,
      mention_everyone: isSet(object.mention_everyone) ? globalThis.Boolean(object.mention_everyone) : false,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
    };
  },

  toJSON(message: ChannelMessageSend): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.mentions?.length) {
      obj.mentions = message.mentions.map((e) => MessageMention.toJSON(e));
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => MessageAttachment.toJSON(e));
    }
    if (message.references?.length) {
      obj.references = message.references.map((e) => MessageRef.toJSON(e));
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.anonymous_message !== false) {
      obj.anonymous_message = message.anonymous_message;
    }
    if (message.mention_everyone !== false) {
      obj.mention_everyone = message.mention_everyone;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.topic_id !== "") {
      obj.topic_id = message.topic_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelMessageSend>, I>>(base?: I): ChannelMessageSend {
    return ChannelMessageSend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelMessageSend>, I>>(object: I): ChannelMessageSend {
    const message = createBaseChannelMessageSend();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.content = object.content ?? "";
    message.mentions = object.mentions?.map((e) => MessageMention.fromPartial(e)) || [];
    message.attachments = object.attachments?.map((e) => MessageAttachment.fromPartial(e)) || [];
    message.references = object.references?.map((e) => MessageRef.fromPartial(e)) || [];
    message.mode = object.mode ?? 0;
    message.anonymous_message = object.anonymous_message ?? false;
    message.mention_everyone = object.mention_everyone ?? false;
    message.avatar = object.avatar ?? "";
    message.is_public = object.is_public ?? false;
    message.code = object.code ?? 0;
    message.topic_id = object.topic_id ?? "";
    return message;
  },
};

function createBaseChannelMessageUpdate(): ChannelMessageUpdate {
  return {
    clan_id: "",
    channel_id: "",
    message_id: "",
    content: "",
    mentions: [],
    attachments: [],
    mode: 0,
    is_public: false,
    hide_editted: false,
    topic_id: "",
    is_update_msg_topic: false,
  };
}

export const ChannelMessageUpdate = {
  encode(message: ChannelMessageUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(26).string(message.message_id);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    for (const v of message.mentions) {
      MessageMention.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.attachments) {
      MessageAttachment.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    if (message.mode !== 0) {
      writer.uint32(56).int32(message.mode);
    }
    if (message.is_public !== false) {
      writer.uint32(64).bool(message.is_public);
    }
    if (message.hide_editted !== false) {
      writer.uint32(72).bool(message.hide_editted);
    }
    if (message.topic_id !== "") {
      writer.uint32(82).string(message.topic_id);
    }
    if (message.is_update_msg_topic !== false) {
      writer.uint32(88).bool(message.is_update_msg_topic);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessageUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelMessageUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mentions.push(MessageMention.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.attachments.push(MessageAttachment.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.is_public = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.hide_editted = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.topic_id = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.is_update_msg_topic = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelMessageUpdate {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      mentions: globalThis.Array.isArray(object?.mentions)
        ? object.mentions.map((e: any) => MessageMention.fromJSON(e))
        : [],
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => MessageAttachment.fromJSON(e))
        : [],
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
      hide_editted: isSet(object.hide_editted) ? globalThis.Boolean(object.hide_editted) : false,
      topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
      is_update_msg_topic: isSet(object.is_update_msg_topic) ? globalThis.Boolean(object.is_update_msg_topic) : false,
    };
  },

  toJSON(message: ChannelMessageUpdate): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.mentions?.length) {
      obj.mentions = message.mentions.map((e) => MessageMention.toJSON(e));
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => MessageAttachment.toJSON(e));
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    if (message.hide_editted !== false) {
      obj.hide_editted = message.hide_editted;
    }
    if (message.topic_id !== "") {
      obj.topic_id = message.topic_id;
    }
    if (message.is_update_msg_topic !== false) {
      obj.is_update_msg_topic = message.is_update_msg_topic;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelMessageUpdate>, I>>(base?: I): ChannelMessageUpdate {
    return ChannelMessageUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelMessageUpdate>, I>>(object: I): ChannelMessageUpdate {
    const message = createBaseChannelMessageUpdate();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.content = object.content ?? "";
    message.mentions = object.mentions?.map((e) => MessageMention.fromPartial(e)) || [];
    message.attachments = object.attachments?.map((e) => MessageAttachment.fromPartial(e)) || [];
    message.mode = object.mode ?? 0;
    message.is_public = object.is_public ?? false;
    message.hide_editted = object.hide_editted ?? false;
    message.topic_id = object.topic_id ?? "";
    message.is_update_msg_topic = object.is_update_msg_topic ?? false;
    return message;
  },
};

function createBaseChannelMessageRemove(): ChannelMessageRemove {
  return {
    clan_id: "",
    channel_id: "",
    message_id: "",
    mode: 0,
    is_public: false,
    has_attachment: false,
    topic_id: "",
  };
}

export const ChannelMessageRemove = {
  encode(message: ChannelMessageRemove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(26).string(message.message_id);
    }
    if (message.mode !== 0) {
      writer.uint32(32).int32(message.mode);
    }
    if (message.is_public !== false) {
      writer.uint32(40).bool(message.is_public);
    }
    if (message.has_attachment !== false) {
      writer.uint32(48).bool(message.has_attachment);
    }
    if (message.topic_id !== "") {
      writer.uint32(58).string(message.topic_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessageRemove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelMessageRemove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.is_public = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.has_attachment = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.topic_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelMessageRemove {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
      has_attachment: isSet(object.has_attachment) ? globalThis.Boolean(object.has_attachment) : false,
      topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
    };
  },

  toJSON(message: ChannelMessageRemove): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    if (message.has_attachment !== false) {
      obj.has_attachment = message.has_attachment;
    }
    if (message.topic_id !== "") {
      obj.topic_id = message.topic_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelMessageRemove>, I>>(base?: I): ChannelMessageRemove {
    return ChannelMessageRemove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelMessageRemove>, I>>(object: I): ChannelMessageRemove {
    const message = createBaseChannelMessageRemove();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.mode = object.mode ?? 0;
    message.is_public = object.is_public ?? false;
    message.has_attachment = object.has_attachment ?? false;
    message.topic_id = object.topic_id ?? "";
    return message;
  },
};

function createBaseChannelPresenceEvent(): ChannelPresenceEvent {
  return { channel_id: "", joins: [], leaves: [], clan_logo: "", category_name: "", mode: 0 };
}

export const ChannelPresenceEvent = {
  encode(message: ChannelPresenceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_id !== "") {
      writer.uint32(10).string(message.channel_id);
    }
    for (const v of message.joins) {
      UserPresence.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.leaves) {
      UserPresence.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.clan_logo !== "") {
      writer.uint32(34).string(message.clan_logo);
    }
    if (message.category_name !== "") {
      writer.uint32(42).string(message.category_name);
    }
    if (message.mode !== 0) {
      writer.uint32(48).int32(message.mode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelPresenceEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelPresenceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.joins.push(UserPresence.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leaves.push(UserPresence.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_logo = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.category_name = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.mode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelPresenceEvent {
    return {
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      joins: globalThis.Array.isArray(object?.joins) ? object.joins.map((e: any) => UserPresence.fromJSON(e)) : [],
      leaves: globalThis.Array.isArray(object?.leaves) ? object.leaves.map((e: any) => UserPresence.fromJSON(e)) : [],
      clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
      category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
    };
  },

  toJSON(message: ChannelPresenceEvent): unknown {
    const obj: any = {};
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.joins?.length) {
      obj.joins = message.joins.map((e) => UserPresence.toJSON(e));
    }
    if (message.leaves?.length) {
      obj.leaves = message.leaves.map((e) => UserPresence.toJSON(e));
    }
    if (message.clan_logo !== "") {
      obj.clan_logo = message.clan_logo;
    }
    if (message.category_name !== "") {
      obj.category_name = message.category_name;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelPresenceEvent>, I>>(base?: I): ChannelPresenceEvent {
    return ChannelPresenceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelPresenceEvent>, I>>(object: I): ChannelPresenceEvent {
    const message = createBaseChannelPresenceEvent();
    message.channel_id = object.channel_id ?? "";
    message.joins = object.joins?.map((e) => UserPresence.fromPartial(e)) || [];
    message.leaves = object.leaves?.map((e) => UserPresence.fromPartial(e)) || [];
    message.clan_logo = object.clan_logo ?? "";
    message.category_name = object.category_name ?? "";
    message.mode = object.mode ?? 0;
    return message;
  },
};

function createBaseError(): Error {
  return { code: 0, message: "", context: {} };
}

export const Error = {
  encode(message: Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    Object.entries(message.context).forEach(([key, value]) => {
      Error_ContextEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Error_ContextEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.context[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      context: isObject(object.context)
        ? Object.entries(object.context).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.context) {
      const entries = Object.entries(message.context);
      if (entries.length > 0) {
        obj.context = {};
        entries.forEach(([k, v]) => {
          obj.context[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.context = Object.entries(object.context ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseError_ContextEntry(): Error_ContextEntry {
  return { key: "", value: "" };
}

export const Error_ContextEntry = {
  encode(message: Error_ContextEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error_ContextEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError_ContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error_ContextEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Error_ContextEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error_ContextEntry>, I>>(base?: I): Error_ContextEntry {
    return Error_ContextEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error_ContextEntry>, I>>(object: I): Error_ContextEntry {
    const message = createBaseError_ContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseNotifications(): Notifications {
  return { notifications: [] };
}

export const Notifications = {
  encode(message: Notifications, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Notifications {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotifications();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notifications {
    return {
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Notifications): unknown {
    const obj: any = {};
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notifications>, I>>(base?: I): Notifications {
    return Notifications.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notifications>, I>>(object: I): Notifications {
    const message = createBaseNotifications();
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveFriend(): RemoveFriend {
  return { user_id: "" };
}

export const RemoveFriend = {
  encode(message: RemoveFriend, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFriend {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFriend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFriend {
    return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
  },

  toJSON(message: RemoveFriend): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFriend>, I>>(base?: I): RemoveFriend {
    return RemoveFriend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFriend>, I>>(object: I): RemoveFriend {
    const message = createBaseRemoveFriend();
    message.user_id = object.user_id ?? "";
    return message;
  },
};

function createBasePing(): Ping {
  return {};
}

export const Ping = {
  encode(_: Ping, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ping {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Ping {
    return {};
  },

  toJSON(_: Ping): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Ping>, I>>(base?: I): Ping {
    return Ping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ping>, I>>(_: I): Ping {
    const message = createBasePing();
    return message;
  },
};

function createBasePong(): Pong {
  return {};
}

export const Pong = {
  encode(_: Pong, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Pong {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Pong {
    return {};
  },

  toJSON(_: Pong): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Pong>, I>>(base?: I): Pong {
    return Pong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pong>, I>>(_: I): Pong {
    const message = createBasePong();
    return message;
  },
};

function createBaseStatus(): Status {
  return { presences: [] };
}

export const Status = {
  encode(message: Status, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.presences) {
      UserPresence.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Status {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.presences.push(UserPresence.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Status {
    return {
      presences: globalThis.Array.isArray(object?.presences)
        ? object.presences.map((e: any) => UserPresence.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Status): unknown {
    const obj: any = {};
    if (message.presences?.length) {
      obj.presences = message.presences.map((e) => UserPresence.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Status>, I>>(base?: I): Status {
    return Status.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Status>, I>>(object: I): Status {
    const message = createBaseStatus();
    message.presences = object.presences?.map((e) => UserPresence.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStatusFollow(): StatusFollow {
  return { user_ids: [], usernames: [] };
}

export const StatusFollow = {
  encode(message: StatusFollow, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.user_ids) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.usernames) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StatusFollow {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusFollow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_ids.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.usernames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusFollow {
    return {
      user_ids: globalThis.Array.isArray(object?.user_ids) ? object.user_ids.map((e: any) => globalThis.String(e)) : [],
      usernames: globalThis.Array.isArray(object?.usernames)
        ? object.usernames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: StatusFollow): unknown {
    const obj: any = {};
    if (message.user_ids?.length) {
      obj.user_ids = message.user_ids;
    }
    if (message.usernames?.length) {
      obj.usernames = message.usernames;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusFollow>, I>>(base?: I): StatusFollow {
    return StatusFollow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusFollow>, I>>(object: I): StatusFollow {
    const message = createBaseStatusFollow();
    message.user_ids = object.user_ids?.map((e) => e) || [];
    message.usernames = object.usernames?.map((e) => e) || [];
    return message;
  },
};

function createBaseStatusPresenceEvent(): StatusPresenceEvent {
  return { joins: [], leaves: [] };
}

export const StatusPresenceEvent = {
  encode(message: StatusPresenceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.joins) {
      UserPresence.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.leaves) {
      UserPresence.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StatusPresenceEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusPresenceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.joins.push(UserPresence.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leaves.push(UserPresence.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusPresenceEvent {
    return {
      joins: globalThis.Array.isArray(object?.joins) ? object.joins.map((e: any) => UserPresence.fromJSON(e)) : [],
      leaves: globalThis.Array.isArray(object?.leaves) ? object.leaves.map((e: any) => UserPresence.fromJSON(e)) : [],
    };
  },

  toJSON(message: StatusPresenceEvent): unknown {
    const obj: any = {};
    if (message.joins?.length) {
      obj.joins = message.joins.map((e) => UserPresence.toJSON(e));
    }
    if (message.leaves?.length) {
      obj.leaves = message.leaves.map((e) => UserPresence.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusPresenceEvent>, I>>(base?: I): StatusPresenceEvent {
    return StatusPresenceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusPresenceEvent>, I>>(object: I): StatusPresenceEvent {
    const message = createBaseStatusPresenceEvent();
    message.joins = object.joins?.map((e) => UserPresence.fromPartial(e)) || [];
    message.leaves = object.leaves?.map((e) => UserPresence.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLastPinMessageEvent(): LastPinMessageEvent {
  return {
    clan_id: "",
    channel_id: "",
    message_id: "",
    mode: 0,
    user_id: "",
    timestamp_seconds: 0,
    operation: 0,
    is_public: false,
  };
}

export const LastPinMessageEvent = {
  encode(message: LastPinMessageEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(26).string(message.message_id);
    }
    if (message.mode !== 0) {
      writer.uint32(32).int32(message.mode);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    if (message.timestamp_seconds !== 0) {
      writer.uint32(48).uint32(message.timestamp_seconds);
    }
    if (message.operation !== 0) {
      writer.uint32(56).int32(message.operation);
    }
    if (message.is_public !== false) {
      writer.uint32(64).bool(message.is_public);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LastPinMessageEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLastPinMessageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.timestamp_seconds = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.operation = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.is_public = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LastPinMessageEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      timestamp_seconds: isSet(object.timestamp_seconds) ? globalThis.Number(object.timestamp_seconds) : 0,
      operation: isSet(object.operation) ? globalThis.Number(object.operation) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
    };
  },

  toJSON(message: LastPinMessageEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.timestamp_seconds !== 0) {
      obj.timestamp_seconds = Math.round(message.timestamp_seconds);
    }
    if (message.operation !== 0) {
      obj.operation = Math.round(message.operation);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LastPinMessageEvent>, I>>(base?: I): LastPinMessageEvent {
    return LastPinMessageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LastPinMessageEvent>, I>>(object: I): LastPinMessageEvent {
    const message = createBaseLastPinMessageEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.mode = object.mode ?? 0;
    message.user_id = object.user_id ?? "";
    message.timestamp_seconds = object.timestamp_seconds ?? 0;
    message.operation = object.operation ?? 0;
    message.is_public = object.is_public ?? false;
    return message;
  },
};

function createBaseLastSeenMessageEvent(): LastSeenMessageEvent {
  return { clan_id: "", channel_id: "", message_id: "", mode: 0, timestamp_seconds: 0, badge_count: 0 };
}

export const LastSeenMessageEvent = {
  encode(message: LastSeenMessageEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(26).string(message.message_id);
    }
    if (message.mode !== 0) {
      writer.uint32(32).int32(message.mode);
    }
    if (message.timestamp_seconds !== 0) {
      writer.uint32(40).uint32(message.timestamp_seconds);
    }
    if (message.badge_count !== 0) {
      writer.uint32(48).int32(message.badge_count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LastSeenMessageEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLastSeenMessageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.timestamp_seconds = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.badge_count = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LastSeenMessageEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      timestamp_seconds: isSet(object.timestamp_seconds) ? globalThis.Number(object.timestamp_seconds) : 0,
      badge_count: isSet(object.badge_count) ? globalThis.Number(object.badge_count) : 0,
    };
  },

  toJSON(message: LastSeenMessageEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.timestamp_seconds !== 0) {
      obj.timestamp_seconds = Math.round(message.timestamp_seconds);
    }
    if (message.badge_count !== 0) {
      obj.badge_count = Math.round(message.badge_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LastSeenMessageEvent>, I>>(base?: I): LastSeenMessageEvent {
    return LastSeenMessageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LastSeenMessageEvent>, I>>(object: I): LastSeenMessageEvent {
    const message = createBaseLastSeenMessageEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.mode = object.mode ?? 0;
    message.timestamp_seconds = object.timestamp_seconds ?? 0;
    message.badge_count = object.badge_count ?? 0;
    return message;
  },
};

function createBaseMessageTypingEvent(): MessageTypingEvent {
  return { clan_id: "", channel_id: "", sender_id: "", mode: 0, is_public: false };
}

export const MessageTypingEvent = {
  encode(message: MessageTypingEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.sender_id !== "") {
      writer.uint32(26).string(message.sender_id);
    }
    if (message.mode !== 0) {
      writer.uint32(32).int32(message.mode);
    }
    if (message.is_public !== false) {
      writer.uint32(40).bool(message.is_public);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MessageTypingEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageTypingEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.is_public = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageTypingEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
    };
  },

  toJSON(message: MessageTypingEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.sender_id !== "") {
      obj.sender_id = message.sender_id;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.is_public !== false) {
      obj.is_public = message.is_public;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageTypingEvent>, I>>(base?: I): MessageTypingEvent {
    return MessageTypingEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageTypingEvent>, I>>(object: I): MessageTypingEvent {
    const message = createBaseMessageTypingEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.sender_id = object.sender_id ?? "";
    message.mode = object.mode ?? 0;
    message.is_public = object.is_public ?? false;
    return message;
  },
};

function createBaseVoiceLeavedEvent(): VoiceLeavedEvent {
  return { id: "", clan_id: "", voice_channel_id: "", voice_user_id: "" };
}

export const VoiceLeavedEvent = {
  encode(message: VoiceLeavedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.voice_channel_id !== "") {
      writer.uint32(26).string(message.voice_channel_id);
    }
    if (message.voice_user_id !== "") {
      writer.uint32(34).string(message.voice_user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoiceLeavedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoiceLeavedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.voice_channel_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.voice_user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoiceLeavedEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
      voice_user_id: isSet(object.voice_user_id) ? globalThis.String(object.voice_user_id) : "",
    };
  },

  toJSON(message: VoiceLeavedEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.voice_channel_id !== "") {
      obj.voice_channel_id = message.voice_channel_id;
    }
    if (message.voice_user_id !== "") {
      obj.voice_user_id = message.voice_user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoiceLeavedEvent>, I>>(base?: I): VoiceLeavedEvent {
    return VoiceLeavedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoiceLeavedEvent>, I>>(object: I): VoiceLeavedEvent {
    const message = createBaseVoiceLeavedEvent();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.voice_channel_id = object.voice_channel_id ?? "";
    message.voice_user_id = object.voice_user_id ?? "";
    return message;
  },
};

function createBaseVoiceJoinedEvent(): VoiceJoinedEvent {
  return {
    clan_id: "",
    clan_name: "",
    id: "",
    participant: "",
    user_id: "",
    voice_channel_label: "",
    voice_channel_id: "",
    last_screenshot: "",
  };
}

export const VoiceJoinedEvent = {
  encode(message: VoiceJoinedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.clan_name !== "") {
      writer.uint32(18).string(message.clan_name);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.participant !== "") {
      writer.uint32(34).string(message.participant);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    if (message.voice_channel_label !== "") {
      writer.uint32(50).string(message.voice_channel_label);
    }
    if (message.voice_channel_id !== "") {
      writer.uint32(58).string(message.voice_channel_id);
    }
    if (message.last_screenshot !== "") {
      writer.uint32(66).string(message.last_screenshot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoiceJoinedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoiceJoinedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.participant = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.voice_channel_label = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.voice_channel_id = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.last_screenshot = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoiceJoinedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      voice_channel_label: isSet(object.voice_channel_label) ? globalThis.String(object.voice_channel_label) : "",
      voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
      last_screenshot: isSet(object.last_screenshot) ? globalThis.String(object.last_screenshot) : "",
    };
  },

  toJSON(message: VoiceJoinedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.participant !== "") {
      obj.participant = message.participant;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.voice_channel_label !== "") {
      obj.voice_channel_label = message.voice_channel_label;
    }
    if (message.voice_channel_id !== "") {
      obj.voice_channel_id = message.voice_channel_id;
    }
    if (message.last_screenshot !== "") {
      obj.last_screenshot = message.last_screenshot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoiceJoinedEvent>, I>>(base?: I): VoiceJoinedEvent {
    return VoiceJoinedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoiceJoinedEvent>, I>>(object: I): VoiceJoinedEvent {
    const message = createBaseVoiceJoinedEvent();
    message.clan_id = object.clan_id ?? "";
    message.clan_name = object.clan_name ?? "";
    message.id = object.id ?? "";
    message.participant = object.participant ?? "";
    message.user_id = object.user_id ?? "";
    message.voice_channel_label = object.voice_channel_label ?? "";
    message.voice_channel_id = object.voice_channel_id ?? "";
    message.last_screenshot = object.last_screenshot ?? "";
    return message;
  },
};

function createBaseVoiceStartedEvent(): VoiceStartedEvent {
  return { id: "", clan_id: "", voice_channel_id: "" };
}

export const VoiceStartedEvent = {
  encode(message: VoiceStartedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.voice_channel_id !== "") {
      writer.uint32(26).string(message.voice_channel_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoiceStartedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoiceStartedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.voice_channel_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoiceStartedEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
    };
  },

  toJSON(message: VoiceStartedEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.voice_channel_id !== "") {
      obj.voice_channel_id = message.voice_channel_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoiceStartedEvent>, I>>(base?: I): VoiceStartedEvent {
    return VoiceStartedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoiceStartedEvent>, I>>(object: I): VoiceStartedEvent {
    const message = createBaseVoiceStartedEvent();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.voice_channel_id = object.voice_channel_id ?? "";
    return message;
  },
};

function createBaseVoiceEndedEvent(): VoiceEndedEvent {
  return { id: "", clan_id: "", voice_channel_id: "" };
}

export const VoiceEndedEvent = {
  encode(message: VoiceEndedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.voice_channel_id !== "") {
      writer.uint32(26).string(message.voice_channel_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoiceEndedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoiceEndedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.voice_channel_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoiceEndedEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
    };
  },

  toJSON(message: VoiceEndedEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.voice_channel_id !== "") {
      obj.voice_channel_id = message.voice_channel_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoiceEndedEvent>, I>>(base?: I): VoiceEndedEvent {
    return VoiceEndedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoiceEndedEvent>, I>>(object: I): VoiceEndedEvent {
    const message = createBaseVoiceEndedEvent();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.voice_channel_id = object.voice_channel_id ?? "";
    return message;
  },
};

function createBaseStreamingLeavedEvent(): StreamingLeavedEvent {
  return { id: "", clan_id: "", streaming_channel_id: "", streaming_user_id: "" };
}

export const StreamingLeavedEvent = {
  encode(message: StreamingLeavedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.streaming_channel_id !== "") {
      writer.uint32(26).string(message.streaming_channel_id);
    }
    if (message.streaming_user_id !== "") {
      writer.uint32(34).string(message.streaming_user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingLeavedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingLeavedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.streaming_channel_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.streaming_user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingLeavedEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      streaming_channel_id: isSet(object.streaming_channel_id) ? globalThis.String(object.streaming_channel_id) : "",
      streaming_user_id: isSet(object.streaming_user_id) ? globalThis.String(object.streaming_user_id) : "",
    };
  },

  toJSON(message: StreamingLeavedEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.streaming_channel_id !== "") {
      obj.streaming_channel_id = message.streaming_channel_id;
    }
    if (message.streaming_user_id !== "") {
      obj.streaming_user_id = message.streaming_user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingLeavedEvent>, I>>(base?: I): StreamingLeavedEvent {
    return StreamingLeavedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingLeavedEvent>, I>>(object: I): StreamingLeavedEvent {
    const message = createBaseStreamingLeavedEvent();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.streaming_channel_id = object.streaming_channel_id ?? "";
    message.streaming_user_id = object.streaming_user_id ?? "";
    return message;
  },
};

function createBaseStreamingJoinedEvent(): StreamingJoinedEvent {
  return {
    clan_id: "",
    clan_name: "",
    id: "",
    participant: "",
    user_id: "",
    streaming_channel_label: "",
    streaming_channel_id: "",
  };
}

export const StreamingJoinedEvent = {
  encode(message: StreamingJoinedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.clan_name !== "") {
      writer.uint32(18).string(message.clan_name);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.participant !== "") {
      writer.uint32(34).string(message.participant);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    if (message.streaming_channel_label !== "") {
      writer.uint32(50).string(message.streaming_channel_label);
    }
    if (message.streaming_channel_id !== "") {
      writer.uint32(58).string(message.streaming_channel_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingJoinedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingJoinedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.participant = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.streaming_channel_label = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.streaming_channel_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingJoinedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      streaming_channel_label: isSet(object.streaming_channel_label)
        ? globalThis.String(object.streaming_channel_label)
        : "",
      streaming_channel_id: isSet(object.streaming_channel_id) ? globalThis.String(object.streaming_channel_id) : "",
    };
  },

  toJSON(message: StreamingJoinedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.participant !== "") {
      obj.participant = message.participant;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.streaming_channel_label !== "") {
      obj.streaming_channel_label = message.streaming_channel_label;
    }
    if (message.streaming_channel_id !== "") {
      obj.streaming_channel_id = message.streaming_channel_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingJoinedEvent>, I>>(base?: I): StreamingJoinedEvent {
    return StreamingJoinedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingJoinedEvent>, I>>(object: I): StreamingJoinedEvent {
    const message = createBaseStreamingJoinedEvent();
    message.clan_id = object.clan_id ?? "";
    message.clan_name = object.clan_name ?? "";
    message.id = object.id ?? "";
    message.participant = object.participant ?? "";
    message.user_id = object.user_id ?? "";
    message.streaming_channel_label = object.streaming_channel_label ?? "";
    message.streaming_channel_id = object.streaming_channel_id ?? "";
    return message;
  },
};

function createBaseStreamingStartedEvent(): StreamingStartedEvent {
  return { clan_id: "", channel_id: "", streaming_url: "", is_streaming: false };
}

export const StreamingStartedEvent = {
  encode(message: StreamingStartedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.streaming_url !== "") {
      writer.uint32(26).string(message.streaming_url);
    }
    if (message.is_streaming !== false) {
      writer.uint32(32).bool(message.is_streaming);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingStartedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingStartedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.streaming_url = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.is_streaming = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingStartedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      streaming_url: isSet(object.streaming_url) ? globalThis.String(object.streaming_url) : "",
      is_streaming: isSet(object.is_streaming) ? globalThis.Boolean(object.is_streaming) : false,
    };
  },

  toJSON(message: StreamingStartedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.streaming_url !== "") {
      obj.streaming_url = message.streaming_url;
    }
    if (message.is_streaming !== false) {
      obj.is_streaming = message.is_streaming;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingStartedEvent>, I>>(base?: I): StreamingStartedEvent {
    return StreamingStartedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingStartedEvent>, I>>(object: I): StreamingStartedEvent {
    const message = createBaseStreamingStartedEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.streaming_url = object.streaming_url ?? "";
    message.is_streaming = object.is_streaming ?? false;
    return message;
  },
};

function createBaseStreamingEndedEvent(): StreamingEndedEvent {
  return { clan_id: "", channel_id: "" };
}

export const StreamingEndedEvent = {
  encode(message: StreamingEndedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingEndedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingEndedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingEndedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
    };
  },

  toJSON(message: StreamingEndedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingEndedEvent>, I>>(base?: I): StreamingEndedEvent {
    return StreamingEndedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingEndedEvent>, I>>(object: I): StreamingEndedEvent {
    const message = createBaseStreamingEndedEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    return message;
  },
};

function createBaseChannelCreatedEvent(): ChannelCreatedEvent {
  return {
    clan_id: "",
    category_id: "",
    creator_id: "",
    parent_id: "",
    channel_id: "",
    channel_label: "",
    channel_private: 0,
    channel_type: undefined,
    status: 0,
    app_url: "",
    clan_name: "",
  };
}

export const ChannelCreatedEvent = {
  encode(message: ChannelCreatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.category_id !== "") {
      writer.uint32(18).string(message.category_id);
    }
    if (message.creator_id !== "") {
      writer.uint32(26).string(message.creator_id);
    }
    if (message.parent_id !== "") {
      writer.uint32(34).string(message.parent_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(42).string(message.channel_id);
    }
    if (message.channel_label !== "") {
      writer.uint32(50).string(message.channel_label);
    }
    if (message.channel_private !== 0) {
      writer.uint32(56).int32(message.channel_private);
    }
    if (message.channel_type !== undefined) {
      Int32Value.encode({ value: message.channel_type! }, writer.uint32(66).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(72).int32(message.status);
    }
    if (message.app_url !== "") {
      writer.uint32(82).string(message.app_url);
    }
    if (message.clan_name !== "") {
      writer.uint32(90).string(message.clan_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelCreatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.channel_label = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.channel_private = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.channel_type = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.app_url = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.clan_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelCreatedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
      channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
      channel_type: isSet(object.channel_type) ? Number(object.channel_type) : undefined,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
    };
  },

  toJSON(message: ChannelCreatedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.category_id !== "") {
      obj.category_id = message.category_id;
    }
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.parent_id !== "") {
      obj.parent_id = message.parent_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.channel_label !== "") {
      obj.channel_label = message.channel_label;
    }
    if (message.channel_private !== 0) {
      obj.channel_private = Math.round(message.channel_private);
    }
    if (message.channel_type !== undefined) {
      obj.channel_type = message.channel_type;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.app_url !== "") {
      obj.app_url = message.app_url;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelCreatedEvent>, I>>(base?: I): ChannelCreatedEvent {
    return ChannelCreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelCreatedEvent>, I>>(object: I): ChannelCreatedEvent {
    const message = createBaseChannelCreatedEvent();
    message.clan_id = object.clan_id ?? "";
    message.category_id = object.category_id ?? "";
    message.creator_id = object.creator_id ?? "";
    message.parent_id = object.parent_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.channel_label = object.channel_label ?? "";
    message.channel_private = object.channel_private ?? 0;
    message.channel_type = object.channel_type ?? undefined;
    message.status = object.status ?? 0;
    message.app_url = object.app_url ?? "";
    message.clan_name = object.clan_name ?? "";
    return message;
  },
};

function createBaseCategoryEvent(): CategoryEvent {
  return { creator_id: "", clan_id: "", category_name: "", id: "", status: 0 };
}

export const CategoryEvent = {
  encode(message: CategoryEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator_id !== "") {
      writer.uint32(10).string(message.creator_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.category_name !== "") {
      writer.uint32(26).string(message.category_name);
    }
    if (message.id !== "") {
      writer.uint32(34).string(message.id);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CategoryEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.category_name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.id = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryEvent {
    return {
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: CategoryEvent): unknown {
    const obj: any = {};
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.category_name !== "") {
      obj.category_name = message.category_name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryEvent>, I>>(base?: I): CategoryEvent {
    return CategoryEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryEvent>, I>>(object: I): CategoryEvent {
    const message = createBaseCategoryEvent();
    message.creator_id = object.creator_id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.category_name = object.category_name ?? "";
    message.id = object.id ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseRoleEvent(): RoleEvent {
  return {
    role: undefined,
    status: 0,
    user_id: "",
    user_add_ids: [],
    user_remove_ids: [],
    active_permission_ids: [],
    remove_permission_ids: [],
  };
}

export const RoleEvent = {
  encode(message: RoleEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== undefined) {
      Role.encode(message.role, writer.uint32(10).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.user_id !== "") {
      writer.uint32(26).string(message.user_id);
    }
    for (const v of message.user_add_ids) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.user_remove_ids) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.active_permission_ids) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.remove_permission_ids) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.role = Role.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.user_add_ids.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_remove_ids.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.active_permission_ids.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.remove_permission_ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleEvent {
    return {
      role: isSet(object.role) ? Role.fromJSON(object.role) : undefined,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      user_add_ids: globalThis.Array.isArray(object?.user_add_ids)
        ? object.user_add_ids.map((e: any) => globalThis.String(e))
        : [],
      user_remove_ids: globalThis.Array.isArray(object?.user_remove_ids)
        ? object.user_remove_ids.map((e: any) => globalThis.String(e))
        : [],
      active_permission_ids: globalThis.Array.isArray(object?.active_permission_ids)
        ? object.active_permission_ids.map((e: any) => globalThis.String(e))
        : [],
      remove_permission_ids: globalThis.Array.isArray(object?.remove_permission_ids)
        ? object.remove_permission_ids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RoleEvent): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = Role.toJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.user_add_ids?.length) {
      obj.user_add_ids = message.user_add_ids;
    }
    if (message.user_remove_ids?.length) {
      obj.user_remove_ids = message.user_remove_ids;
    }
    if (message.active_permission_ids?.length) {
      obj.active_permission_ids = message.active_permission_ids;
    }
    if (message.remove_permission_ids?.length) {
      obj.remove_permission_ids = message.remove_permission_ids;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleEvent>, I>>(base?: I): RoleEvent {
    return RoleEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleEvent>, I>>(object: I): RoleEvent {
    const message = createBaseRoleEvent();
    message.role = (object.role !== undefined && object.role !== null) ? Role.fromPartial(object.role) : undefined;
    message.status = object.status ?? 0;
    message.user_id = object.user_id ?? "";
    message.user_add_ids = object.user_add_ids?.map((e) => e) || [];
    message.user_remove_ids = object.user_remove_ids?.map((e) => e) || [];
    message.active_permission_ids = object.active_permission_ids?.map((e) => e) || [];
    message.remove_permission_ids = object.remove_permission_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseChannelDeletedEvent(): ChannelDeletedEvent {
  return { clan_id: "", category_id: "", parent_id: "", channel_id: "", deletor: "" };
}

export const ChannelDeletedEvent = {
  encode(message: ChannelDeletedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.category_id !== "") {
      writer.uint32(18).string(message.category_id);
    }
    if (message.parent_id !== "") {
      writer.uint32(26).string(message.parent_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(34).string(message.channel_id);
    }
    if (message.deletor !== "") {
      writer.uint32(42).string(message.deletor);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelDeletedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deletor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelDeletedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
      parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      deletor: isSet(object.deletor) ? globalThis.String(object.deletor) : "",
    };
  },

  toJSON(message: ChannelDeletedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.category_id !== "") {
      obj.category_id = message.category_id;
    }
    if (message.parent_id !== "") {
      obj.parent_id = message.parent_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.deletor !== "") {
      obj.deletor = message.deletor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelDeletedEvent>, I>>(base?: I): ChannelDeletedEvent {
    return ChannelDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelDeletedEvent>, I>>(object: I): ChannelDeletedEvent {
    const message = createBaseChannelDeletedEvent();
    message.clan_id = object.clan_id ?? "";
    message.category_id = object.category_id ?? "";
    message.parent_id = object.parent_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.deletor = object.deletor ?? "";
    return message;
  },
};

function createBaseClanDeletedEvent(): ClanDeletedEvent {
  return { clan_id: "", deletor: "" };
}

export const ClanDeletedEvent = {
  encode(message: ClanDeletedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.deletor !== "") {
      writer.uint32(18).string(message.deletor);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClanDeletedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClanDeletedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deletor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClanDeletedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      deletor: isSet(object.deletor) ? globalThis.String(object.deletor) : "",
    };
  },

  toJSON(message: ClanDeletedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.deletor !== "") {
      obj.deletor = message.deletor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClanDeletedEvent>, I>>(base?: I): ClanDeletedEvent {
    return ClanDeletedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClanDeletedEvent>, I>>(object: I): ClanDeletedEvent {
    const message = createBaseClanDeletedEvent();
    message.clan_id = object.clan_id ?? "";
    message.deletor = object.deletor ?? "";
    return message;
  },
};

function createBaseStickerCreateEvent(): StickerCreateEvent {
  return {
    clan_id: "",
    source: "",
    shortname: "",
    category: "",
    creator_id: "",
    sticker_id: "",
    logo: "",
    clan_name: "",
  };
}

export const StickerCreateEvent = {
  encode(message: StickerCreateEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    if (message.shortname !== "") {
      writer.uint32(26).string(message.shortname);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (message.creator_id !== "") {
      writer.uint32(42).string(message.creator_id);
    }
    if (message.sticker_id !== "") {
      writer.uint32(50).string(message.sticker_id);
    }
    if (message.logo !== "") {
      writer.uint32(58).string(message.logo);
    }
    if (message.clan_name !== "") {
      writer.uint32(66).string(message.clan_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StickerCreateEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStickerCreateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortname = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sticker_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.logo = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.clan_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StickerCreateEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
    };
  },

  toJSON(message: StickerCreateEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.shortname !== "") {
      obj.shortname = message.shortname;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.sticker_id !== "") {
      obj.sticker_id = message.sticker_id;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StickerCreateEvent>, I>>(base?: I): StickerCreateEvent {
    return StickerCreateEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StickerCreateEvent>, I>>(object: I): StickerCreateEvent {
    const message = createBaseStickerCreateEvent();
    message.clan_id = object.clan_id ?? "";
    message.source = object.source ?? "";
    message.shortname = object.shortname ?? "";
    message.category = object.category ?? "";
    message.creator_id = object.creator_id ?? "";
    message.sticker_id = object.sticker_id ?? "";
    message.logo = object.logo ?? "";
    message.clan_name = object.clan_name ?? "";
    return message;
  },
};

function createBaseStickerUpdateEvent(): StickerUpdateEvent {
  return { shortname: "", sticker_id: "", user_id: "" };
}

export const StickerUpdateEvent = {
  encode(message: StickerUpdateEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.shortname !== "") {
      writer.uint32(10).string(message.shortname);
    }
    if (message.sticker_id !== "") {
      writer.uint32(18).string(message.sticker_id);
    }
    if (message.user_id !== "") {
      writer.uint32(26).string(message.user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StickerUpdateEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStickerUpdateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.shortname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sticker_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StickerUpdateEvent {
    return {
      shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
      sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
    };
  },

  toJSON(message: StickerUpdateEvent): unknown {
    const obj: any = {};
    if (message.shortname !== "") {
      obj.shortname = message.shortname;
    }
    if (message.sticker_id !== "") {
      obj.sticker_id = message.sticker_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StickerUpdateEvent>, I>>(base?: I): StickerUpdateEvent {
    return StickerUpdateEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StickerUpdateEvent>, I>>(object: I): StickerUpdateEvent {
    const message = createBaseStickerUpdateEvent();
    message.shortname = object.shortname ?? "";
    message.sticker_id = object.sticker_id ?? "";
    message.user_id = object.user_id ?? "";
    return message;
  },
};

function createBaseStickerDeleteEvent(): StickerDeleteEvent {
  return { sticker_id: "", user_id: "" };
}

export const StickerDeleteEvent = {
  encode(message: StickerDeleteEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sticker_id !== "") {
      writer.uint32(18).string(message.sticker_id);
    }
    if (message.user_id !== "") {
      writer.uint32(26).string(message.user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StickerDeleteEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStickerDeleteEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sticker_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StickerDeleteEvent {
    return {
      sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
    };
  },

  toJSON(message: StickerDeleteEvent): unknown {
    const obj: any = {};
    if (message.sticker_id !== "") {
      obj.sticker_id = message.sticker_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StickerDeleteEvent>, I>>(base?: I): StickerDeleteEvent {
    return StickerDeleteEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StickerDeleteEvent>, I>>(object: I): StickerDeleteEvent {
    const message = createBaseStickerDeleteEvent();
    message.sticker_id = object.sticker_id ?? "";
    message.user_id = object.user_id ?? "";
    return message;
  },
};

function createBaseChannelUpdatedEvent(): ChannelUpdatedEvent {
  return {
    clan_id: "",
    category_id: "",
    creator_id: "",
    parent_id: "",
    channel_id: "",
    channel_label: "",
    channel_type: undefined,
    status: 0,
    meeting_code: "",
    is_error: false,
    channel_private: false,
    app_url: "",
    e2ee: 0,
    topic: "",
    age_restricted: 0,
    active: 0,
  };
}

export const ChannelUpdatedEvent = {
  encode(message: ChannelUpdatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.category_id !== "") {
      writer.uint32(18).string(message.category_id);
    }
    if (message.creator_id !== "") {
      writer.uint32(26).string(message.creator_id);
    }
    if (message.parent_id !== "") {
      writer.uint32(34).string(message.parent_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(42).string(message.channel_id);
    }
    if (message.channel_label !== "") {
      writer.uint32(50).string(message.channel_label);
    }
    if (message.channel_type !== undefined) {
      Int32Value.encode({ value: message.channel_type! }, writer.uint32(58).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    if (message.meeting_code !== "") {
      writer.uint32(74).string(message.meeting_code);
    }
    if (message.is_error !== false) {
      writer.uint32(80).bool(message.is_error);
    }
    if (message.channel_private !== false) {
      writer.uint32(88).bool(message.channel_private);
    }
    if (message.app_url !== "") {
      writer.uint32(98).string(message.app_url);
    }
    if (message.e2ee !== 0) {
      writer.uint32(104).int32(message.e2ee);
    }
    if (message.topic !== "") {
      writer.uint32(114).string(message.topic);
    }
    if (message.age_restricted !== 0) {
      writer.uint32(120).int32(message.age_restricted);
    }
    if (message.active !== 0) {
      writer.uint32(128).int32(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelUpdatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creator_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.channel_label = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.channel_type = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.meeting_code = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.is_error = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.channel_private = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.app_url = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.e2ee = reader.int32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.topic = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.age_restricted = reader.int32();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.active = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelUpdatedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
      creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
      parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
      channel_type: isSet(object.channel_type) ? Number(object.channel_type) : undefined,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
      is_error: isSet(object.is_error) ? globalThis.Boolean(object.is_error) : false,
      channel_private: isSet(object.channel_private) ? globalThis.Boolean(object.channel_private) : false,
      app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
      e2ee: isSet(object.e2ee) ? globalThis.Number(object.e2ee) : 0,
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      age_restricted: isSet(object.age_restricted) ? globalThis.Number(object.age_restricted) : 0,
      active: isSet(object.active) ? globalThis.Number(object.active) : 0,
    };
  },

  toJSON(message: ChannelUpdatedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.category_id !== "") {
      obj.category_id = message.category_id;
    }
    if (message.creator_id !== "") {
      obj.creator_id = message.creator_id;
    }
    if (message.parent_id !== "") {
      obj.parent_id = message.parent_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.channel_label !== "") {
      obj.channel_label = message.channel_label;
    }
    if (message.channel_type !== undefined) {
      obj.channel_type = message.channel_type;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.meeting_code !== "") {
      obj.meeting_code = message.meeting_code;
    }
    if (message.is_error !== false) {
      obj.is_error = message.is_error;
    }
    if (message.channel_private !== false) {
      obj.channel_private = message.channel_private;
    }
    if (message.app_url !== "") {
      obj.app_url = message.app_url;
    }
    if (message.e2ee !== 0) {
      obj.e2ee = Math.round(message.e2ee);
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.age_restricted !== 0) {
      obj.age_restricted = Math.round(message.age_restricted);
    }
    if (message.active !== 0) {
      obj.active = Math.round(message.active);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelUpdatedEvent>, I>>(base?: I): ChannelUpdatedEvent {
    return ChannelUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelUpdatedEvent>, I>>(object: I): ChannelUpdatedEvent {
    const message = createBaseChannelUpdatedEvent();
    message.clan_id = object.clan_id ?? "";
    message.category_id = object.category_id ?? "";
    message.creator_id = object.creator_id ?? "";
    message.parent_id = object.parent_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.channel_label = object.channel_label ?? "";
    message.channel_type = object.channel_type ?? undefined;
    message.status = object.status ?? 0;
    message.meeting_code = object.meeting_code ?? "";
    message.is_error = object.is_error ?? false;
    message.channel_private = object.channel_private ?? false;
    message.app_url = object.app_url ?? "";
    message.e2ee = object.e2ee ?? 0;
    message.topic = object.topic ?? "";
    message.age_restricted = object.age_restricted ?? 0;
    message.active = object.active ?? 0;
    return message;
  },
};

function createBaseStatusUnfollow(): StatusUnfollow {
  return { user_ids: [] };
}

export const StatusUnfollow = {
  encode(message: StatusUnfollow, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.user_ids) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StatusUnfollow {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusUnfollow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusUnfollow {
    return {
      user_ids: globalThis.Array.isArray(object?.user_ids) ? object.user_ids.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StatusUnfollow): unknown {
    const obj: any = {};
    if (message.user_ids?.length) {
      obj.user_ids = message.user_ids;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusUnfollow>, I>>(base?: I): StatusUnfollow {
    return StatusUnfollow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusUnfollow>, I>>(object: I): StatusUnfollow {
    const message = createBaseStatusUnfollow();
    message.user_ids = object.user_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseStatusUpdate(): StatusUpdate {
  return { status: undefined };
}

export const StatusUpdate = {
  encode(message: StatusUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== undefined) {
      StringValue.encode({ value: message.status! }, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StatusUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusUpdate {
    return { status: isSet(object.status) ? String(object.status) : undefined };
  },

  toJSON(message: StatusUpdate): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusUpdate>, I>>(base?: I): StatusUpdate {
    return StatusUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusUpdate>, I>>(object: I): StatusUpdate {
    const message = createBaseStatusUpdate();
    message.status = object.status ?? undefined;
    return message;
  },
};

function createBaseStream(): Stream {
  return { mode: 0, channel_id: "", clan_id: "", label: "" };
}

export const Stream = {
  encode(message: Stream, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(26).string(message.clan_id);
    }
    if (message.label !== "") {
      writer.uint32(34).string(message.label);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stream {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.label = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stream {
    return {
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: Stream): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stream>, I>>(base?: I): Stream {
    return Stream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stream>, I>>(object: I): Stream {
    const message = createBaseStream();
    message.mode = object.mode ?? 0;
    message.channel_id = object.channel_id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseStreamData(): StreamData {
  return { stream: undefined, sender: undefined, data: "", reliable: false };
}

export const StreamData = {
  encode(message: StreamData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stream !== undefined) {
      Stream.encode(message.stream, writer.uint32(10).fork()).ldelim();
    }
    if (message.sender !== undefined) {
      UserPresence.encode(message.sender, writer.uint32(18).fork()).ldelim();
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.reliable !== false) {
      writer.uint32(32).bool(message.reliable);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stream = Stream.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = UserPresence.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reliable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamData {
    return {
      stream: isSet(object.stream) ? Stream.fromJSON(object.stream) : undefined,
      sender: isSet(object.sender) ? UserPresence.fromJSON(object.sender) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      reliable: isSet(object.reliable) ? globalThis.Boolean(object.reliable) : false,
    };
  },

  toJSON(message: StreamData): unknown {
    const obj: any = {};
    if (message.stream !== undefined) {
      obj.stream = Stream.toJSON(message.stream);
    }
    if (message.sender !== undefined) {
      obj.sender = UserPresence.toJSON(message.sender);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.reliable !== false) {
      obj.reliable = message.reliable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamData>, I>>(base?: I): StreamData {
    return StreamData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamData>, I>>(object: I): StreamData {
    const message = createBaseStreamData();
    message.stream = (object.stream !== undefined && object.stream !== null)
      ? Stream.fromPartial(object.stream)
      : undefined;
    message.sender = (object.sender !== undefined && object.sender !== null)
      ? UserPresence.fromPartial(object.sender)
      : undefined;
    message.data = object.data ?? "";
    message.reliable = object.reliable ?? false;
    return message;
  },
};

function createBaseStreamPresenceEvent(): StreamPresenceEvent {
  return { stream: undefined, joins: [], leaves: [] };
}

export const StreamPresenceEvent = {
  encode(message: StreamPresenceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stream !== undefined) {
      Stream.encode(message.stream, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.joins) {
      UserPresence.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.leaves) {
      UserPresence.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamPresenceEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPresenceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stream = Stream.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.joins.push(UserPresence.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leaves.push(UserPresence.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamPresenceEvent {
    return {
      stream: isSet(object.stream) ? Stream.fromJSON(object.stream) : undefined,
      joins: globalThis.Array.isArray(object?.joins) ? object.joins.map((e: any) => UserPresence.fromJSON(e)) : [],
      leaves: globalThis.Array.isArray(object?.leaves) ? object.leaves.map((e: any) => UserPresence.fromJSON(e)) : [],
    };
  },

  toJSON(message: StreamPresenceEvent): unknown {
    const obj: any = {};
    if (message.stream !== undefined) {
      obj.stream = Stream.toJSON(message.stream);
    }
    if (message.joins?.length) {
      obj.joins = message.joins.map((e) => UserPresence.toJSON(e));
    }
    if (message.leaves?.length) {
      obj.leaves = message.leaves.map((e) => UserPresence.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamPresenceEvent>, I>>(base?: I): StreamPresenceEvent {
    return StreamPresenceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamPresenceEvent>, I>>(object: I): StreamPresenceEvent {
    const message = createBaseStreamPresenceEvent();
    message.stream = (object.stream !== undefined && object.stream !== null)
      ? Stream.fromPartial(object.stream)
      : undefined;
    message.joins = object.joins?.map((e) => UserPresence.fromPartial(e)) || [];
    message.leaves = object.leaves?.map((e) => UserPresence.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserPresence(): UserPresence {
  return {
    user_id: "",
    session_id: "",
    username: "",
    persistence: false,
    status: undefined,
    is_mobile: false,
    metadata: "",
  };
}

export const UserPresence = {
  encode(message: UserPresence, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.session_id !== "") {
      writer.uint32(18).string(message.session_id);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.persistence !== false) {
      writer.uint32(32).bool(message.persistence);
    }
    if (message.status !== undefined) {
      StringValue.encode({ value: message.status! }, writer.uint32(42).fork()).ldelim();
    }
    if (message.is_mobile !== false) {
      writer.uint32(48).bool(message.is_mobile);
    }
    if (message.metadata !== "") {
      writer.uint32(58).string(message.metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserPresence {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPresence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.persistence = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.status = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.is_mobile = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPresence {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      session_id: isSet(object.session_id) ? globalThis.String(object.session_id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      persistence: isSet(object.persistence) ? globalThis.Boolean(object.persistence) : false,
      status: isSet(object.status) ? String(object.status) : undefined,
      is_mobile: isSet(object.is_mobile) ? globalThis.Boolean(object.is_mobile) : false,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: UserPresence): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.session_id !== "") {
      obj.session_id = message.session_id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.persistence !== false) {
      obj.persistence = message.persistence;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.is_mobile !== false) {
      obj.is_mobile = message.is_mobile;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPresence>, I>>(base?: I): UserPresence {
    return UserPresence.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPresence>, I>>(object: I): UserPresence {
    const message = createBaseUserPresence();
    message.user_id = object.user_id ?? "";
    message.session_id = object.session_id ?? "";
    message.username = object.username ?? "";
    message.persistence = object.persistence ?? false;
    message.status = object.status ?? undefined;
    message.is_mobile = object.is_mobile ?? false;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseCustomStatusEvent(): CustomStatusEvent {
  return { clan_id: "", user_id: "", username: "", status: "", time_reset: 0, no_clear: false };
}

export const CustomStatusEvent = {
  encode(message: CustomStatusEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.user_id !== "") {
      writer.uint32(18).string(message.user_id);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.time_reset !== 0) {
      writer.uint32(40).int32(message.time_reset);
    }
    if (message.no_clear !== false) {
      writer.uint32(48).bool(message.no_clear);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustomStatusEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomStatusEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.time_reset = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.no_clear = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomStatusEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      time_reset: isSet(object.time_reset) ? globalThis.Number(object.time_reset) : 0,
      no_clear: isSet(object.no_clear) ? globalThis.Boolean(object.no_clear) : false,
    };
  },

  toJSON(message: CustomStatusEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.time_reset !== 0) {
      obj.time_reset = Math.round(message.time_reset);
    }
    if (message.no_clear !== false) {
      obj.no_clear = message.no_clear;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomStatusEvent>, I>>(base?: I): CustomStatusEvent {
    return CustomStatusEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomStatusEvent>, I>>(object: I): CustomStatusEvent {
    const message = createBaseCustomStatusEvent();
    message.clan_id = object.clan_id ?? "";
    message.user_id = object.user_id ?? "";
    message.username = object.username ?? "";
    message.status = object.status ?? "";
    message.time_reset = object.time_reset ?? 0;
    message.no_clear = object.no_clear ?? false;
    return message;
  },
};

function createBaseUserChannelAdded(): UserChannelAdded {
  return {
    channel_desc: undefined,
    users: [],
    status: "",
    clan_id: "",
    caller: undefined,
    create_time_second: 0,
    active: 0,
  };
}

export const UserChannelAdded = {
  encode(message: UserChannelAdded, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_desc !== undefined) {
      ChannelDescription1.encode(message.channel_desc, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.users) {
      UserProfileRedis.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.clan_id !== "") {
      writer.uint32(34).string(message.clan_id);
    }
    if (message.caller !== undefined) {
      UserProfileRedis.encode(message.caller, writer.uint32(42).fork()).ldelim();
    }
    if (message.create_time_second !== 0) {
      writer.uint32(48).uint32(message.create_time_second);
    }
    if (message.active !== 0) {
      writer.uint32(56).int32(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserChannelAdded {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserChannelAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_desc = ChannelDescription1.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.users.push(UserProfileRedis.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.caller = UserProfileRedis.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.create_time_second = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.active = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserChannelAdded {
    return {
      channel_desc: isSet(object.channel_desc) ? ChannelDescription1.fromJSON(object.channel_desc) : undefined,
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserProfileRedis.fromJSON(e)) : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      caller: isSet(object.caller) ? UserProfileRedis.fromJSON(object.caller) : undefined,
      create_time_second: isSet(object.create_time_second) ? globalThis.Number(object.create_time_second) : 0,
      active: isSet(object.active) ? globalThis.Number(object.active) : 0,
    };
  },

  toJSON(message: UserChannelAdded): unknown {
    const obj: any = {};
    if (message.channel_desc !== undefined) {
      obj.channel_desc = ChannelDescription1.toJSON(message.channel_desc);
    }
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserProfileRedis.toJSON(e));
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.caller !== undefined) {
      obj.caller = UserProfileRedis.toJSON(message.caller);
    }
    if (message.create_time_second !== 0) {
      obj.create_time_second = Math.round(message.create_time_second);
    }
    if (message.active !== 0) {
      obj.active = Math.round(message.active);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserChannelAdded>, I>>(base?: I): UserChannelAdded {
    return UserChannelAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserChannelAdded>, I>>(object: I): UserChannelAdded {
    const message = createBaseUserChannelAdded();
    message.channel_desc = (object.channel_desc !== undefined && object.channel_desc !== null)
      ? ChannelDescription1.fromPartial(object.channel_desc)
      : undefined;
    message.users = object.users?.map((e) => UserProfileRedis.fromPartial(e)) || [];
    message.status = object.status ?? "";
    message.clan_id = object.clan_id ?? "";
    message.caller = (object.caller !== undefined && object.caller !== null)
      ? UserProfileRedis.fromPartial(object.caller)
      : undefined;
    message.create_time_second = object.create_time_second ?? 0;
    message.active = object.active ?? 0;
    return message;
  },
};

function createBaseUserChannelRemoved(): UserChannelRemoved {
  return { channel_id: "", user_ids: [], channel_type: 0, clan_id: "" };
}

export const UserChannelRemoved = {
  encode(message: UserChannelRemoved, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_id !== "") {
      writer.uint32(10).string(message.channel_id);
    }
    for (const v of message.user_ids) {
      writer.uint32(18).string(v!);
    }
    if (message.channel_type !== 0) {
      writer.uint32(24).int32(message.channel_type);
    }
    if (message.clan_id !== "") {
      writer.uint32(34).string(message.clan_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserChannelRemoved {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserChannelRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_ids.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel_type = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserChannelRemoved {
    return {
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      user_ids: globalThis.Array.isArray(object?.user_ids) ? object.user_ids.map((e: any) => globalThis.String(e)) : [],
      channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
    };
  },

  toJSON(message: UserChannelRemoved): unknown {
    const obj: any = {};
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.user_ids?.length) {
      obj.user_ids = message.user_ids;
    }
    if (message.channel_type !== 0) {
      obj.channel_type = Math.round(message.channel_type);
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserChannelRemoved>, I>>(base?: I): UserChannelRemoved {
    return UserChannelRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserChannelRemoved>, I>>(object: I): UserChannelRemoved {
    const message = createBaseUserChannelRemoved();
    message.channel_id = object.channel_id ?? "";
    message.user_ids = object.user_ids?.map((e) => e) || [];
    message.channel_type = object.channel_type ?? 0;
    message.clan_id = object.clan_id ?? "";
    return message;
  },
};

function createBaseUserClanRemoved(): UserClanRemoved {
  return { clan_id: "", user_ids: [] };
}

export const UserClanRemoved = {
  encode(message: UserClanRemoved, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    for (const v of message.user_ids) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserClanRemoved {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserClanRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user_ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserClanRemoved {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      user_ids: globalThis.Array.isArray(object?.user_ids) ? object.user_ids.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: UserClanRemoved): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.user_ids?.length) {
      obj.user_ids = message.user_ids;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserClanRemoved>, I>>(base?: I): UserClanRemoved {
    return UserClanRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserClanRemoved>, I>>(object: I): UserClanRemoved {
    const message = createBaseUserClanRemoved();
    message.clan_id = object.clan_id ?? "";
    message.user_ids = object.user_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseClanUpdatedEvent(): ClanUpdatedEvent {
  return {
    clan_id: "",
    clan_name: "",
    logo: "",
    banner: "",
    status: 0,
    is_onboarding: false,
    welcome_channel_id: "",
    onboarding_banner: "",
  };
}

export const ClanUpdatedEvent = {
  encode(message: ClanUpdatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.clan_name !== "") {
      writer.uint32(18).string(message.clan_name);
    }
    if (message.logo !== "") {
      writer.uint32(26).string(message.logo);
    }
    if (message.banner !== "") {
      writer.uint32(34).string(message.banner);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.is_onboarding !== false) {
      writer.uint32(48).bool(message.is_onboarding);
    }
    if (message.welcome_channel_id !== "") {
      writer.uint32(58).string(message.welcome_channel_id);
    }
    if (message.onboarding_banner !== "") {
      writer.uint32(66).string(message.onboarding_banner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClanUpdatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClanUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.banner = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.is_onboarding = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.welcome_channel_id = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.onboarding_banner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClanUpdatedEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      banner: isSet(object.banner) ? globalThis.String(object.banner) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      is_onboarding: isSet(object.is_onboarding) ? globalThis.Boolean(object.is_onboarding) : false,
      welcome_channel_id: isSet(object.welcome_channel_id) ? globalThis.String(object.welcome_channel_id) : "",
      onboarding_banner: isSet(object.onboarding_banner) ? globalThis.String(object.onboarding_banner) : "",
    };
  },

  toJSON(message: ClanUpdatedEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.banner !== "") {
      obj.banner = message.banner;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.is_onboarding !== false) {
      obj.is_onboarding = message.is_onboarding;
    }
    if (message.welcome_channel_id !== "") {
      obj.welcome_channel_id = message.welcome_channel_id;
    }
    if (message.onboarding_banner !== "") {
      obj.onboarding_banner = message.onboarding_banner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClanUpdatedEvent>, I>>(base?: I): ClanUpdatedEvent {
    return ClanUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClanUpdatedEvent>, I>>(object: I): ClanUpdatedEvent {
    const message = createBaseClanUpdatedEvent();
    message.clan_id = object.clan_id ?? "";
    message.clan_name = object.clan_name ?? "";
    message.logo = object.logo ?? "";
    message.banner = object.banner ?? "";
    message.status = object.status ?? 0;
    message.is_onboarding = object.is_onboarding ?? false;
    message.welcome_channel_id = object.welcome_channel_id ?? "";
    message.onboarding_banner = object.onboarding_banner ?? "";
    return message;
  },
};

function createBaseClanProfileUpdatedEvent(): ClanProfileUpdatedEvent {
  return { user_id: "", clan_nick: "", clan_avatar: "", clan_id: "" };
}

export const ClanProfileUpdatedEvent = {
  encode(message: ClanProfileUpdatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.clan_nick !== "") {
      writer.uint32(18).string(message.clan_nick);
    }
    if (message.clan_avatar !== "") {
      writer.uint32(26).string(message.clan_avatar);
    }
    if (message.clan_id !== "") {
      writer.uint32(34).string(message.clan_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClanProfileUpdatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClanProfileUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_nick = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_avatar = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClanProfileUpdatedEvent {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
      clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
    };
  },

  toJSON(message: ClanProfileUpdatedEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.clan_nick !== "") {
      obj.clan_nick = message.clan_nick;
    }
    if (message.clan_avatar !== "") {
      obj.clan_avatar = message.clan_avatar;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClanProfileUpdatedEvent>, I>>(base?: I): ClanProfileUpdatedEvent {
    return ClanProfileUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClanProfileUpdatedEvent>, I>>(object: I): ClanProfileUpdatedEvent {
    const message = createBaseClanProfileUpdatedEvent();
    message.user_id = object.user_id ?? "";
    message.clan_nick = object.clan_nick ?? "";
    message.clan_avatar = object.clan_avatar ?? "";
    message.clan_id = object.clan_id ?? "";
    return message;
  },
};

function createBaseUserProfileUpdatedEvent(): UserProfileUpdatedEvent {
  return {
    user_id: "",
    display_name: "",
    avatar: "",
    about_me: "",
    channel_id: "",
    clan_id: "",
    encrypt_private_key: "",
  };
}

export const UserProfileUpdatedEvent = {
  encode(message: UserProfileUpdatedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.display_name !== "") {
      writer.uint32(18).string(message.display_name);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.about_me !== "") {
      writer.uint32(34).string(message.about_me);
    }
    if (message.channel_id !== "") {
      writer.uint32(42).string(message.channel_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(50).string(message.clan_id);
    }
    if (message.encrypt_private_key !== "") {
      writer.uint32(58).string(message.encrypt_private_key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserProfileUpdatedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfileUpdatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.display_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.about_me = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.encrypt_private_key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfileUpdatedEvent {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      encrypt_private_key: isSet(object.encrypt_private_key) ? globalThis.String(object.encrypt_private_key) : "",
    };
  },

  toJSON(message: UserProfileUpdatedEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.display_name !== "") {
      obj.display_name = message.display_name;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.about_me !== "") {
      obj.about_me = message.about_me;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.encrypt_private_key !== "") {
      obj.encrypt_private_key = message.encrypt_private_key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfileUpdatedEvent>, I>>(base?: I): UserProfileUpdatedEvent {
    return UserProfileUpdatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfileUpdatedEvent>, I>>(object: I): UserProfileUpdatedEvent {
    const message = createBaseUserProfileUpdatedEvent();
    message.user_id = object.user_id ?? "";
    message.display_name = object.display_name ?? "";
    message.avatar = object.avatar ?? "";
    message.about_me = object.about_me ?? "";
    message.channel_id = object.channel_id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.encrypt_private_key = object.encrypt_private_key ?? "";
    return message;
  },
};

function createBaseUserProfileRedis(): UserProfileRedis {
  return {
    user_id: "",
    username: "",
    avatar: "",
    display_name: "",
    about_me: "",
    custom_status: "",
    create_time_second: 0,
    fcm_tokens: [],
    online: false,
    metadata: "",
    is_disabled: false,
    joined_clans: [],
    pubkey: "",
    mezon_id: "",
    app_token: "",
  };
}

export const UserProfileRedis = {
  encode(message: UserProfileRedis, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.display_name !== "") {
      writer.uint32(34).string(message.display_name);
    }
    if (message.about_me !== "") {
      writer.uint32(42).string(message.about_me);
    }
    if (message.custom_status !== "") {
      writer.uint32(50).string(message.custom_status);
    }
    if (message.create_time_second !== 0) {
      writer.uint32(56).uint32(message.create_time_second);
    }
    for (const v of message.fcm_tokens) {
      FCMTokens.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    if (message.online !== false) {
      writer.uint32(72).bool(message.online);
    }
    if (message.metadata !== "") {
      writer.uint32(82).string(message.metadata);
    }
    if (message.is_disabled !== false) {
      writer.uint32(88).bool(message.is_disabled);
    }
    for (const v of message.joined_clans) {
      writer.uint32(98).string(v!);
    }
    if (message.pubkey !== "") {
      writer.uint32(106).string(message.pubkey);
    }
    if (message.mezon_id !== "") {
      writer.uint32(114).string(message.mezon_id);
    }
    if (message.app_token !== "") {
      writer.uint32(122).string(message.app_token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserProfileRedis {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfileRedis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.display_name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.about_me = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.custom_status = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.create_time_second = reader.uint32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fcm_tokens.push(FCMTokens.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.online = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.metadata = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.is_disabled = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.joined_clans.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.mezon_id = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.app_token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfileRedis {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
      about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
      custom_status: isSet(object.custom_status) ? globalThis.String(object.custom_status) : "",
      create_time_second: isSet(object.create_time_second) ? globalThis.Number(object.create_time_second) : 0,
      fcm_tokens: globalThis.Array.isArray(object?.fcm_tokens)
        ? object.fcm_tokens.map((e: any) => FCMTokens.fromJSON(e))
        : [],
      online: isSet(object.online) ? globalThis.Boolean(object.online) : false,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      is_disabled: isSet(object.is_disabled) ? globalThis.Boolean(object.is_disabled) : false,
      joined_clans: globalThis.Array.isArray(object?.joined_clans)
        ? object.joined_clans.map((e: any) => globalThis.String(e))
        : [],
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
      mezon_id: isSet(object.mezon_id) ? globalThis.String(object.mezon_id) : "",
      app_token: isSet(object.app_token) ? globalThis.String(object.app_token) : "",
    };
  },

  toJSON(message: UserProfileRedis): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.display_name !== "") {
      obj.display_name = message.display_name;
    }
    if (message.about_me !== "") {
      obj.about_me = message.about_me;
    }
    if (message.custom_status !== "") {
      obj.custom_status = message.custom_status;
    }
    if (message.create_time_second !== 0) {
      obj.create_time_second = Math.round(message.create_time_second);
    }
    if (message.fcm_tokens?.length) {
      obj.fcm_tokens = message.fcm_tokens.map((e) => FCMTokens.toJSON(e));
    }
    if (message.online !== false) {
      obj.online = message.online;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.is_disabled !== false) {
      obj.is_disabled = message.is_disabled;
    }
    if (message.joined_clans?.length) {
      obj.joined_clans = message.joined_clans;
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    if (message.mezon_id !== "") {
      obj.mezon_id = message.mezon_id;
    }
    if (message.app_token !== "") {
      obj.app_token = message.app_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfileRedis>, I>>(base?: I): UserProfileRedis {
    return UserProfileRedis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfileRedis>, I>>(object: I): UserProfileRedis {
    const message = createBaseUserProfileRedis();
    message.user_id = object.user_id ?? "";
    message.username = object.username ?? "";
    message.avatar = object.avatar ?? "";
    message.display_name = object.display_name ?? "";
    message.about_me = object.about_me ?? "";
    message.custom_status = object.custom_status ?? "";
    message.create_time_second = object.create_time_second ?? 0;
    message.fcm_tokens = object.fcm_tokens?.map((e) => FCMTokens.fromPartial(e)) || [];
    message.online = object.online ?? false;
    message.metadata = object.metadata ?? "";
    message.is_disabled = object.is_disabled ?? false;
    message.joined_clans = object.joined_clans?.map((e) => e) || [];
    message.pubkey = object.pubkey ?? "";
    message.mezon_id = object.mezon_id ?? "";
    message.app_token = object.app_token ?? "";
    return message;
  },
};

function createBaseFCMTokens(): FCMTokens {
  return { device_id: "", token_id: "", platform: "" };
}

export const FCMTokens = {
  encode(message: FCMTokens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.device_id !== "") {
      writer.uint32(10).string(message.device_id);
    }
    if (message.token_id !== "") {
      writer.uint32(18).string(message.token_id);
    }
    if (message.platform !== "") {
      writer.uint32(26).string(message.platform);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FCMTokens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFCMTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.device_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.platform = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FCMTokens {
    return {
      device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
      token_id: isSet(object.token_id) ? globalThis.String(object.token_id) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
    };
  },

  toJSON(message: FCMTokens): unknown {
    const obj: any = {};
    if (message.device_id !== "") {
      obj.device_id = message.device_id;
    }
    if (message.token_id !== "") {
      obj.token_id = message.token_id;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FCMTokens>, I>>(base?: I): FCMTokens {
    return FCMTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FCMTokens>, I>>(object: I): FCMTokens {
    const message = createBaseFCMTokens();
    message.device_id = object.device_id ?? "";
    message.token_id = object.token_id ?? "";
    message.platform = object.platform ?? "";
    return message;
  },
};

function createBaseCheckNameExistedEvent(): CheckNameExistedEvent {
  return { name: "", condition_id: "", exist: false, type: 0 };
}

export const CheckNameExistedEvent = {
  encode(message: CheckNameExistedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.condition_id !== "") {
      writer.uint32(18).string(message.condition_id);
    }
    if (message.exist !== false) {
      writer.uint32(24).bool(message.exist);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CheckNameExistedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckNameExistedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.condition_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.exist = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckNameExistedEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      condition_id: isSet(object.condition_id) ? globalThis.String(object.condition_id) : "",
      exist: isSet(object.exist) ? globalThis.Boolean(object.exist) : false,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
    };
  },

  toJSON(message: CheckNameExistedEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.condition_id !== "") {
      obj.condition_id = message.condition_id;
    }
    if (message.exist !== false) {
      obj.exist = message.exist;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckNameExistedEvent>, I>>(base?: I): CheckNameExistedEvent {
    return CheckNameExistedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckNameExistedEvent>, I>>(object: I): CheckNameExistedEvent {
    const message = createBaseCheckNameExistedEvent();
    message.name = object.name ?? "";
    message.condition_id = object.condition_id ?? "";
    message.exist = object.exist ?? false;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseNotificationChannelCategorySetting(): NotificationChannelCategorySetting {
  return { id: "", channel_category_label: "", notification_setting_type: 0, channel_category_title: "", action: 0 };
}

export const NotificationChannelCategorySetting = {
  encode(message: NotificationChannelCategorySetting, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.channel_category_label !== "") {
      writer.uint32(18).string(message.channel_category_label);
    }
    if (message.notification_setting_type !== 0) {
      writer.uint32(24).int32(message.notification_setting_type);
    }
    if (message.channel_category_title !== "") {
      writer.uint32(34).string(message.channel_category_title);
    }
    if (message.action !== 0) {
      writer.uint32(40).int32(message.action);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NotificationChannelCategorySetting {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationChannelCategorySetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_category_label = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.notification_setting_type = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_category_title = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.action = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationChannelCategorySetting {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      channel_category_label: isSet(object.channel_category_label)
        ? globalThis.String(object.channel_category_label)
        : "",
      notification_setting_type: isSet(object.notification_setting_type)
        ? globalThis.Number(object.notification_setting_type)
        : 0,
      channel_category_title: isSet(object.channel_category_title)
        ? globalThis.String(object.channel_category_title)
        : "",
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
    };
  },

  toJSON(message: NotificationChannelCategorySetting): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.channel_category_label !== "") {
      obj.channel_category_label = message.channel_category_label;
    }
    if (message.notification_setting_type !== 0) {
      obj.notification_setting_type = Math.round(message.notification_setting_type);
    }
    if (message.channel_category_title !== "") {
      obj.channel_category_title = message.channel_category_title;
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationChannelCategorySetting>, I>>(
    base?: I,
  ): NotificationChannelCategorySetting {
    return NotificationChannelCategorySetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationChannelCategorySetting>, I>>(
    object: I,
  ): NotificationChannelCategorySetting {
    const message = createBaseNotificationChannelCategorySetting();
    message.id = object.id ?? "";
    message.channel_category_label = object.channel_category_label ?? "";
    message.notification_setting_type = object.notification_setting_type ?? 0;
    message.channel_category_title = object.channel_category_title ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

function createBaseEventEmoji(): EventEmoji {
  return {
    id: "",
    clan_id: "",
    short_name: "",
    source: "",
    category: "",
    action: 0,
    user_id: "",
    logo: "",
    clan_name: "",
  };
}

export const EventEmoji = {
  encode(message: EventEmoji, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.short_name !== "") {
      writer.uint32(26).string(message.short_name);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.category !== "") {
      writer.uint32(42).string(message.category);
    }
    if (message.action !== 0) {
      writer.uint32(48).int32(message.action);
    }
    if (message.user_id !== "") {
      writer.uint32(58).string(message.user_id);
    }
    if (message.logo !== "") {
      writer.uint32(66).string(message.logo);
    }
    if (message.clan_name !== "") {
      writer.uint32(74).string(message.clan_name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventEmoji {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEmoji();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.short_name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.category = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.action = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.logo = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.clan_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEmoji {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      short_name: isSet(object.short_name) ? globalThis.String(object.short_name) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
    };
  },

  toJSON(message: EventEmoji): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.short_name !== "") {
      obj.short_name = message.short_name;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.clan_name !== "") {
      obj.clan_name = message.clan_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEmoji>, I>>(base?: I): EventEmoji {
    return EventEmoji.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEmoji>, I>>(object: I): EventEmoji {
    const message = createBaseEventEmoji();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.short_name = object.short_name ?? "";
    message.source = object.source ?? "";
    message.category = object.category ?? "";
    message.action = object.action ?? 0;
    message.user_id = object.user_id ?? "";
    message.logo = object.logo ?? "";
    message.clan_name = object.clan_name ?? "";
    return message;
  },
};

function createBasePermissionSetEvent(): PermissionSetEvent {
  return { caller: "", role_id: "", user_id: "", channel_id: "", permission_updates: [] };
}

export const PermissionSetEvent = {
  encode(message: PermissionSetEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.caller !== "") {
      writer.uint32(10).string(message.caller);
    }
    if (message.role_id !== "") {
      writer.uint32(18).string(message.role_id);
    }
    if (message.user_id !== "") {
      writer.uint32(26).string(message.user_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(34).string(message.channel_id);
    }
    for (const v of message.permission_updates) {
      PermissionUpdate.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionSetEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSetEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caller = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.role_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.permission_updates.push(PermissionUpdate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSetEvent {
    return {
      caller: isSet(object.caller) ? globalThis.String(object.caller) : "",
      role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      permission_updates: globalThis.Array.isArray(object?.permission_updates)
        ? object.permission_updates.map((e: any) => PermissionUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PermissionSetEvent): unknown {
    const obj: any = {};
    if (message.caller !== "") {
      obj.caller = message.caller;
    }
    if (message.role_id !== "") {
      obj.role_id = message.role_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.permission_updates?.length) {
      obj.permission_updates = message.permission_updates.map((e) => PermissionUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionSetEvent>, I>>(base?: I): PermissionSetEvent {
    return PermissionSetEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionSetEvent>, I>>(object: I): PermissionSetEvent {
    const message = createBasePermissionSetEvent();
    message.caller = object.caller ?? "";
    message.role_id = object.role_id ?? "";
    message.user_id = object.user_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.permission_updates = object.permission_updates?.map((e) => PermissionUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermissionChangedEvent(): PermissionChangedEvent {
  return { user_id: "", channel_id: "", add_permissions: [], remove_permissions: [], default_permissions: [] };
}

export const PermissionChangedEvent = {
  encode(message: PermissionChangedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    for (const v of message.add_permissions) {
      PermissionUpdate.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.remove_permissions) {
      PermissionUpdate.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.default_permissions) {
      PermissionUpdate.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionChangedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionChangedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.add_permissions.push(PermissionUpdate.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.remove_permissions.push(PermissionUpdate.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.default_permissions.push(PermissionUpdate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionChangedEvent {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      add_permissions: globalThis.Array.isArray(object?.add_permissions)
        ? object.add_permissions.map((e: any) => PermissionUpdate.fromJSON(e))
        : [],
      remove_permissions: globalThis.Array.isArray(object?.remove_permissions)
        ? object.remove_permissions.map((e: any) => PermissionUpdate.fromJSON(e))
        : [],
      default_permissions: globalThis.Array.isArray(object?.default_permissions)
        ? object.default_permissions.map((e: any) => PermissionUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PermissionChangedEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.add_permissions?.length) {
      obj.add_permissions = message.add_permissions.map((e) => PermissionUpdate.toJSON(e));
    }
    if (message.remove_permissions?.length) {
      obj.remove_permissions = message.remove_permissions.map((e) => PermissionUpdate.toJSON(e));
    }
    if (message.default_permissions?.length) {
      obj.default_permissions = message.default_permissions.map((e) => PermissionUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionChangedEvent>, I>>(base?: I): PermissionChangedEvent {
    return PermissionChangedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionChangedEvent>, I>>(object: I): PermissionChangedEvent {
    const message = createBasePermissionChangedEvent();
    message.user_id = object.user_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.add_permissions = object.add_permissions?.map((e) => PermissionUpdate.fromPartial(e)) || [];
    message.remove_permissions = object.remove_permissions?.map((e) => PermissionUpdate.fromPartial(e)) || [];
    message.default_permissions = object.default_permissions?.map((e) => PermissionUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessageButtonClicked(): MessageButtonClicked {
  return { message_id: "", channel_id: "", button_id: "", sender_id: "", user_id: "", extra_data: "" };
}

export const MessageButtonClicked = {
  encode(message: MessageButtonClicked, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message_id !== "") {
      writer.uint32(10).string(message.message_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.button_id !== "") {
      writer.uint32(26).string(message.button_id);
    }
    if (message.sender_id !== "") {
      writer.uint32(34).string(message.sender_id);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    if (message.extra_data !== "") {
      writer.uint32(50).string(message.extra_data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MessageButtonClicked {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageButtonClicked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.button_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.extra_data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageButtonClicked {
    return {
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      button_id: isSet(object.button_id) ? globalThis.String(object.button_id) : "",
      sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      extra_data: isSet(object.extra_data) ? globalThis.String(object.extra_data) : "",
    };
  },

  toJSON(message: MessageButtonClicked): unknown {
    const obj: any = {};
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.button_id !== "") {
      obj.button_id = message.button_id;
    }
    if (message.sender_id !== "") {
      obj.sender_id = message.sender_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.extra_data !== "") {
      obj.extra_data = message.extra_data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageButtonClicked>, I>>(base?: I): MessageButtonClicked {
    return MessageButtonClicked.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageButtonClicked>, I>>(object: I): MessageButtonClicked {
    const message = createBaseMessageButtonClicked();
    message.message_id = object.message_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.button_id = object.button_id ?? "";
    message.sender_id = object.sender_id ?? "";
    message.user_id = object.user_id ?? "";
    message.extra_data = object.extra_data ?? "";
    return message;
  },
};

function createBaseUnmuteEvent(): UnmuteEvent {
  return { channel_id: "", category_id: "", clan_id: "" };
}

export const UnmuteEvent = {
  encode(message: UnmuteEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channel_id !== "") {
      writer.uint32(10).string(message.channel_id);
    }
    if (message.category_id !== "") {
      writer.uint32(18).string(message.category_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(26).string(message.clan_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnmuteEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnmuteEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnmuteEvent {
    return {
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
    };
  },

  toJSON(message: UnmuteEvent): unknown {
    const obj: any = {};
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.category_id !== "") {
      obj.category_id = message.category_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnmuteEvent>, I>>(base?: I): UnmuteEvent {
    return UnmuteEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnmuteEvent>, I>>(object: I): UnmuteEvent {
    const message = createBaseUnmuteEvent();
    message.channel_id = object.channel_id ?? "";
    message.category_id = object.category_id ?? "";
    message.clan_id = object.clan_id ?? "";
    return message;
  },
};

function createBaseListActivity(): ListActivity {
  return { acts: [] };
}

export const ListActivity = {
  encode(message: ListActivity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.acts) {
      UserActivity.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActivity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.acts.push(UserActivity.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActivity {
    return {
      acts: globalThis.Array.isArray(object?.acts) ? object.acts.map((e: any) => UserActivity.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListActivity): unknown {
    const obj: any = {};
    if (message.acts?.length) {
      obj.acts = message.acts.map((e) => UserActivity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActivity>, I>>(base?: I): ListActivity {
    return ListActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActivity>, I>>(object: I): ListActivity {
    const message = createBaseListActivity();
    message.acts = object.acts?.map((e) => UserActivity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDropdownBoxSelected(): DropdownBoxSelected {
  return { message_id: "", channel_id: "", selectbox_id: "", sender_id: "", user_id: "", values: [] };
}

export const DropdownBoxSelected = {
  encode(message: DropdownBoxSelected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message_id !== "") {
      writer.uint32(10).string(message.message_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.selectbox_id !== "") {
      writer.uint32(26).string(message.selectbox_id);
    }
    if (message.sender_id !== "") {
      writer.uint32(34).string(message.sender_id);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    for (const v of message.values) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DropdownBoxSelected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropdownBoxSelected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.selectbox_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DropdownBoxSelected {
    return {
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      selectbox_id: isSet(object.selectbox_id) ? globalThis.String(object.selectbox_id) : "",
      sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DropdownBoxSelected): unknown {
    const obj: any = {};
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.selectbox_id !== "") {
      obj.selectbox_id = message.selectbox_id;
    }
    if (message.sender_id !== "") {
      obj.sender_id = message.sender_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DropdownBoxSelected>, I>>(base?: I): DropdownBoxSelected {
    return DropdownBoxSelected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropdownBoxSelected>, I>>(object: I): DropdownBoxSelected {
    const message = createBaseDropdownBoxSelected();
    message.message_id = object.message_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.selectbox_id = object.selectbox_id ?? "";
    message.sender_id = object.sender_id ?? "";
    message.user_id = object.user_id ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseSdTopicEvent(): SdTopicEvent {
  return {
    id: "",
    clan_id: "",
    channel_id: "",
    message_id: "",
    user_id: "",
    last_sent_message: undefined,
    message: undefined,
  };
}

export const SdTopicEvent = {
  encode(message: SdTopicEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clan_id !== "") {
      writer.uint32(18).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(26).string(message.channel_id);
    }
    if (message.message_id !== "") {
      writer.uint32(34).string(message.message_id);
    }
    if (message.user_id !== "") {
      writer.uint32(42).string(message.user_id);
    }
    if (message.last_sent_message !== undefined) {
      ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(50).fork()).ldelim();
    }
    if (message.message !== undefined) {
      ChannelMessage.encode(message.message, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SdTopicEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSdTopicEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.last_sent_message = ChannelMessageHeader.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.message = ChannelMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SdTopicEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      last_sent_message: isSet(object.last_sent_message)
        ? ChannelMessageHeader.fromJSON(object.last_sent_message)
        : undefined,
      message: isSet(object.message) ? ChannelMessage.fromJSON(object.message) : undefined,
    };
  },

  toJSON(message: SdTopicEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.last_sent_message !== undefined) {
      obj.last_sent_message = ChannelMessageHeader.toJSON(message.last_sent_message);
    }
    if (message.message !== undefined) {
      obj.message = ChannelMessage.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SdTopicEvent>, I>>(base?: I): SdTopicEvent {
    return SdTopicEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SdTopicEvent>, I>>(object: I): SdTopicEvent {
    const message = createBaseSdTopicEvent();
    message.id = object.id ?? "";
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.message_id = object.message_id ?? "";
    message.user_id = object.user_id ?? "";
    message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
      ? ChannelMessageHeader.fromPartial(object.last_sent_message)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? ChannelMessage.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseChannelAppEvent(): ChannelAppEvent {
  return { user_id: "", username: "", clan_id: "", channel_id: "", action: 0 };
}

export const ChannelAppEvent = {
  encode(message: ChannelAppEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.clan_id !== "") {
      writer.uint32(26).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(34).string(message.channel_id);
    }
    if (message.action !== 0) {
      writer.uint32(40).int32(message.action);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelAppEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelAppEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.action = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelAppEvent {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
    };
  },

  toJSON(message: ChannelAppEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelAppEvent>, I>>(base?: I): ChannelAppEvent {
    return ChannelAppEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelAppEvent>, I>>(object: I): ChannelAppEvent {
    const message = createBaseChannelAppEvent();
    message.user_id = object.user_id ?? "";
    message.username = object.username ?? "";
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

function createBaseUserStatusEvent(): UserStatusEvent {
  return { user_id: "", custom_status: "" };
}

export const UserStatusEvent = {
  encode(message: UserStatusEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.custom_status !== "") {
      writer.uint32(18).string(message.custom_status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserStatusEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserStatusEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.custom_status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserStatusEvent {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      custom_status: isSet(object.custom_status) ? globalThis.String(object.custom_status) : "",
    };
  },

  toJSON(message: UserStatusEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.custom_status !== "") {
      obj.custom_status = message.custom_status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserStatusEvent>, I>>(base?: I): UserStatusEvent {
    return UserStatusEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserStatusEvent>, I>>(object: I): UserStatusEvent {
    const message = createBaseUserStatusEvent();
    message.user_id = object.user_id ?? "";
    message.custom_status = object.custom_status ?? "";
    return message;
  },
};

function createBaseJoinChannelAppData(): JoinChannelAppData {
  return { user_id: "", username: "", hash: "" };
}

export const JoinChannelAppData = {
  encode(message: JoinChannelAppData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.hash !== "") {
      writer.uint32(26).string(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JoinChannelAppData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinChannelAppData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinChannelAppData {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
    };
  },

  toJSON(message: JoinChannelAppData): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinChannelAppData>, I>>(base?: I): JoinChannelAppData {
    return JoinChannelAppData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinChannelAppData>, I>>(object: I): JoinChannelAppData {
    const message = createBaseJoinChannelAppData();
    message.user_id = object.user_id ?? "";
    message.username = object.username ?? "";
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseUnpinMessageEvent(): UnpinMessageEvent {
  return { id: "", message_id: "", channel_id: "", clan_id: "" };
}

export const UnpinMessageEvent = {
  encode(message: UnpinMessageEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.message_id !== "") {
      writer.uint32(18).string(message.message_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(26).string(message.channel_id);
    }
    if (message.clan_id !== "") {
      writer.uint32(34).string(message.clan_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnpinMessageEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnpinMessageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clan_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnpinMessageEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
    };
  },

  toJSON(message: UnpinMessageEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message_id !== "") {
      obj.message_id = message.message_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnpinMessageEvent>, I>>(base?: I): UnpinMessageEvent {
    return UnpinMessageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnpinMessageEvent>, I>>(object: I): UnpinMessageEvent {
    const message = createBaseUnpinMessageEvent();
    message.id = object.id ?? "";
    message.message_id = object.message_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.clan_id = object.clan_id ?? "";
    return message;
  },
};

function createBaseHandleParticipantMeetStateEvent(): HandleParticipantMeetStateEvent {
  return { clan_id: "", channel_id: "", display_name: "", state: 0 };
}

export const HandleParticipantMeetStateEvent = {
  encode(message: HandleParticipantMeetStateEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clan_id !== "") {
      writer.uint32(10).string(message.clan_id);
    }
    if (message.channel_id !== "") {
      writer.uint32(18).string(message.channel_id);
    }
    if (message.display_name !== "") {
      writer.uint32(26).string(message.display_name);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HandleParticipantMeetStateEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandleParticipantMeetStateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clan_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channel_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.display_name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandleParticipantMeetStateEvent {
    return {
      clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
      channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
      display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
    };
  },

  toJSON(message: HandleParticipantMeetStateEvent): unknown {
    const obj: any = {};
    if (message.clan_id !== "") {
      obj.clan_id = message.clan_id;
    }
    if (message.channel_id !== "") {
      obj.channel_id = message.channel_id;
    }
    if (message.display_name !== "") {
      obj.display_name = message.display_name;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandleParticipantMeetStateEvent>, I>>(base?: I): HandleParticipantMeetStateEvent {
    return HandleParticipantMeetStateEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandleParticipantMeetStateEvent>, I>>(
    object: I,
  ): HandleParticipantMeetStateEvent {
    const message = createBaseHandleParticipantMeetStateEvent();
    message.clan_id = object.clan_id ?? "";
    message.channel_id = object.channel_id ?? "";
    message.display_name = object.display_name ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseDeleteAccountEvent(): DeleteAccountEvent {
  return { user_id: "" };
}

export const DeleteAccountEvent = {
  encode(message: DeleteAccountEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteAccountEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountEvent {
    return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
  },

  toJSON(message: DeleteAccountEvent): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAccountEvent>, I>>(base?: I): DeleteAccountEvent {
    return DeleteAccountEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAccountEvent>, I>>(object: I): DeleteAccountEvent {
    const message = createBaseDeleteAccountEvent();
    message.user_id = object.user_id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
